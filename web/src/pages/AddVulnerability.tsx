import { Field, Form, Formik } from "formik";
import { useEffect, useState } from "react";
import Button from "../components/Button";
import Buttons from "../components/Buttons";
import CardBox from "../components/CardBox";
import calculateCVSSFromMetrics, { calculateCVSSFromVector } from "../components/CVSS/CVSS31/CVSS31";
import CVSS3Calculator from "../components/CVSS/CVSS31/CVSS3Calculator";
import { CVSS3Context, CVSSProvider } from "../components/CVSS/CVSS31/CVSS3Context";
import ScoreBar from "../components/CVSS/ScoreBar";
import Divider from "../components/Divider";
import Accordion from "../components/Form/Accordion";
import FormCheckRadio from "../components/Form/CheckRadio";
import FormCheckRadioGroup from "../components/Form/CheckRadioGroup";
import FormField from "../components/Form/Field";
import SelectWrapper from "../components/Form/SelectWrapper";
import { SelectOption } from "../components/Form/SelectWrapper.types";
import SectionMain from "../components/Section/Main";
import { getPageTitle } from "../config";
import "./AddVulnerability.css";

const AddVulnerability = () => {
  return (
    <>
      <CVSSProvider>
        <AddVulnerabilityContent />
      </CVSSProvider>
    </>
  );
};

const AddVulnerabilityContent = () => {
  const [VulnerabilitySelectOptions, setVulnerabilitySelectOptions] = useState<SelectOption[]>([
    { label: "v2", value: 0 },
    { label: "v3", value: 1 },
    { label: "v4", value: 2 },
  ]);
  const [selectedVulnerabilityOptions, setSelectedVulnerabilityOptions] = useState<SelectOption | SelectOption[]>(null);
  const [isModalInfoActive, setIsModalInfoActive] = useState(false);

  const { selectedValues, setSelectedValues } = CVSS3Context();
  const [cvssValue, setCvssValue] = useState(calculateCVSSFromMetrics(selectedValues).vectorString);

  const handleModalAction = () => {
    setIsModalInfoActive(false);
  };

  useEffect(() => {
    document.title = getPageTitle("Add Vulnerability");
  }, []);

  const handleInputChange = e => {
    setCvssValue(e.target.value);
  };

  const handleScoreBar = () => {
    const parsedCvss = cvssValue.startsWith("CVSS:3.1/") ? cvssValue : "CVSS:3.1/" + cvssValue;
    const cvssInfo = calculateCVSSFromVector(parsedCvss, false);
    if ("environmentalMetricScore" in cvssInfo) {
      return cvssInfo.environmentalMetricScore;
    }
    return 0;
  };

  const updateVectorString = (updatedValues: typeof selectedValues) => {
    const updatedVectorString = calculateCVSSFromMetrics(updatedValues).vectorString;
    setCvssValue(updatedVectorString);
  };

  const handleFieldUpdateToSelectedValues = () => {
    const parsedCvss = cvssValue.startsWith("CVSS:3.1/") ? cvssValue : "CVSS:3.1/" + cvssValue;
    const cvssInfo = calculateCVSSFromVector(parsedCvss, false);
    if ("success" in cvssInfo) {
      const cvssInfo = calculateCVSSFromVector(parsedCvss, true);
      if ("AttackVector" in cvssInfo) {
        const parsedValues = {
          AttackVector: cvssInfo.AttackVector,
          AttackComplexity: cvssInfo.AttackComplexity,
          PrivilegesRequired: cvssInfo.PrivilegesRequired,
          UserInteraction: cvssInfo.UserInteraction,
          Scope: cvssInfo.Scope,
          Confidentiality: cvssInfo.Confidentiality,
          Integrity: cvssInfo.Integrity,
          Availability: cvssInfo.Availability,
          ExploitCodeMaturity: cvssInfo.ExploitCodeMaturity,
          RemediationLevel: cvssInfo.RemediationLevel,
          ReportConfidence: cvssInfo.ReportConfidence,
          ConfidentialityRequirement: cvssInfo.ConfidentialityRequirement,
          IntegrityRequirement: cvssInfo.IntegrityRequirement,
          AvailabilityRequirement: cvssInfo.AvailabilityRequirement,
          ModifiedAttackVector: cvssInfo.ModifiedAttackVector,
          ModifiedAttackComplexity: cvssInfo.ModifiedAttackComplexity,
          ModifiedPrivilegesRequired: cvssInfo.ModifiedPrivilegesRequired,
          ModifiedUserInteraction: cvssInfo.ModifiedUserInteraction,
          ModifiedScope: cvssInfo.ModifiedScope,
          ModifiedConfidentiality: cvssInfo.ModifiedConfidentiality,
          ModifiedIntegrity: cvssInfo.ModifiedIntegrity,
          ModifiedAvailability: cvssInfo.ModifiedAvailability,
        };
        setSelectedValues(parsedValues);
      }
    }
  };

  return (
    <>
      <SectionMain>
        <CardBox>
          <Formik initialValues={{}} onSubmit={undefined}>
            <Form>
              <FormField label="Vulnerability">
                <SelectWrapper
                  options={VulnerabilitySelectOptions}
                  onChange={selectedOptions => setSelectedVulnerabilityOptions(selectedOptions)}
                  defaultValue={{ label: "v2", value: 0 }}
                />
                <Field type="text" name="detail" placeholder="Additional detail" />
              </FormField>
              <FormField noHeight>
                <FormField label={["Host", "Generic"]}>
                  <Field name="host" id="host" component="select">
                    <option value="red">Red</option>
                    <option value="green">Green</option>
                    <option value="blue">Blue</option>
                  </Field>
                </FormField>
                <FormField label="Generic" isBorderless isTransparent>
                  <div className="bg-transparent">
                    <FormCheckRadioGroup>
                      <FormCheckRadio type="switch" label="Description">
                        <Field
                          type="checkbox"
                          name="gen_desc"
                          checked
                          onClick={e => {
                            console.log(e.target.checked);
                          }}
                        />
                      </FormCheckRadio>
                      <FormCheckRadio type="switch" label="Remediation">
                        <Field
                          type="checkbox"
                          name="gen_rem"
                          checked
                          onClick={e => {
                            console.log(e.target.checked);
                          }}
                        />
                      </FormCheckRadio>
                    </FormCheckRadioGroup>
                  </div>
                </FormField>
              </FormField>
              <FormField label={["CVSS vector", "Score"]} gridTemplateColumns="grid-cols-[63%_36%]">
                <Field
                  name="cvss"
                  id="cvss"
                  placeholder="CVSS"
                  value={cvssValue}
                  onChange={handleInputChange}
                  onBlur={handleFieldUpdateToSelectedValues}
                />
                <ScoreBar score={handleScoreBar()} />
              </FormField>
              <Accordion title={"CVSS Calculator"}>
                <CVSS3Calculator updateVectorString={updateVectorString} />
              </Accordion>
              <Divider />
              <FormField label="Description" hasTextareaHeight>
                <Field name="desc" as="textarea" placeholder="Description here" />
              </FormField>
              <FormField label="Remediation" hasTextareaHeight>
                <Field name="rem" as="textarea" placeholder="Remediation here" />
              </FormField>
              <FormField label="References" hasTextareaHeight>
                <Field name="ref" as="textarea" placeholder="Additional references here" />
              </FormField>
              <Divider />
              <Buttons>
                <Button type="submit" color="info" label="Submit" />
                <Button type="reset" color="info" outline label="Cancel" />
              </Buttons>
            </Form>
          </Formik>
        </CardBox>
      </SectionMain>
    </>
  );
};

export default AddVulnerability;
