import { useContext, useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router";
import { toast } from "react-toastify";
import { getData, postData, putData } from "../api/api";
import { GlobalContext } from "../App";
import Card from "../components/Composition/Card";
import Divider from "../components/Composition/Divider";
import Grid from "../components/Composition/Grid";
import CVSS31Wrapper from "../components/CVSS/CVSS31Wrapper/CVSS31Wrapper";
import CVSS40Wrapper from "../components/CVSS/CVSS40Wrapper/CVSS40Wrapper";
import Button from "../components/Form/Button";
import Buttons from "../components/Form/Buttons";
import Checkbox from "../components/Form/Checkbox";
import Input from "../components/Form/Input";
import SelectWrapper from "../components/Form/SelectWrapper";
import { SelectOption } from "../components/Form/SelectWrapper.types";
import Textarea from "../components/Form/Textarea";
import { Assessment, Category, Target, Vulnerability } from "../types/common.types";
import { languageMapping } from "../utils/constants";

export default function VulnerabilityUpsert() {
  const { assessmentId, vulnerabilityId } = useParams<{ assessmentId: string; vulnerabilityId?: string }>();
  const {
    useCtxCustomer: [ctxCustomer],
  } = useContext(GlobalContext);
  const navigate = useNavigate();

  const [categories, setCategories] = useState<Category[]>([]);
  const [targets, setTargets] = useState<Target[]>([]);
  const [assessment, setAssessment] = useState<Assessment>();
  const [selectedVulnerability, setSelectedVulnerability] = useState<SelectOption>();
  const [categoryDescription, setCategoryDescription] = useState<string>("");
  const [categoryRemediation, setCategoryRemediation] = useState<string>("");
  const [categoryReferences, setCategoryReferences] = useState([]);
  const [targetId, setTargetId] = useState<string>("");
  const [checkedItems, setCheckedItems] = useState({
    all_categories: false,
    generic_remediation: true,
  });
  const [form, setForm] = useState({
    detailed_title: "",
    status: "Open",
    cvssv31_vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
    cvssv4_vector: "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:N/SC:N/SI:N/SA:N",
    description: "",
    remediation: "",
    references: [],
  });

  useEffect(() => {
    getData<Category[]>("/api/categories", setCategories);
    getData<Target[]>(`/api/customers/${ctxCustomer.id}/targets`, setTargets);
    if (ctxCustomer.id && assessmentId) {
      getData<Assessment>(`/api/assessments/${assessmentId}`, setAssessment);
    }
  }, [ctxCustomer.id, assessmentId]);

  useEffect(() => {
    if (!vulnerabilityId) {
      return;
    }
    getData<Vulnerability>(`/api/vulnerabilities/${vulnerabilityId}`, data => {
      setSelectedVulnerability({
        label: `${data.category.index} - ${data.category.name}`,
        value: data.category.id,
      });
      setTargetId(data.target.id);
      setForm({
        detailed_title: data.detailed_title,
        status: data.status,
        cvssv31_vector: data.cvssv31.vector,
        cvssv4_vector: data.cvssv4.vector,
        description: data.description,
        remediation: data.remediation,
        references: data.references,
      });
      setCheckedItems({
        all_categories: false,
        generic_remediation: data.generic_remediation?.enabled ?? false,
      });
    });
  }, []);

  useEffect(() => {
    // If currently selected vulnerability is no longer in the filtered list, reset it
    if (
      selectedVulnerability &&
      !vulnerabilitySelectOptions.some(option => option.value === selectedVulnerability.value)
    ) {
      setSelectedVulnerability(null);
    }
  }, [checkedItems.all_categories, categories]);

  const vulnerabilitySelectOptions: SelectOption[] = (
    checkedItems.all_categories
      ? categories
      : categories.filter(category => category.source !== "nessus" && category.source !== "burp")
  )
    .slice()
    .sort((a, b) => a.name.localeCompare(b.name))
    .map(item => ({
    label: `${item.index} - ${item.name}`,
    value: item.id,
  }));

  useEffect(() => {
    if (!selectedVulnerability?.value) {
      return;
    }

    const matchedCategory = categories.find(category => category.id === selectedVulnerability.value);
    if (!matchedCategory) {
      return;
    }
    if (assessment == undefined) {
      return;
    }
    const langShort = assessment.customer.language;
    setCategoryDescription(
      matchedCategory.generic_description[langShort] ?? `Missing generic description for ${languageMapping[langShort]}.`
    );

    let genericRemediation = "Generic remediation disabled.";
    if (checkedItems.generic_remediation) {
      genericRemediation =
        matchedCategory.generic_remediation[langShort] ??
        `Missing generic remediation for ${languageMapping[langShort]}.`;
    }

    setCategoryReferences(matchedCategory.references);
    setCategoryRemediation(genericRemediation);
  }, [selectedVulnerability, categories, checkedItems, assessment]);

  const targetOptions: SelectOption[] = targets.map(target => ({
    value: target.id,
    label: `${target.fqdn}${target.ipv4 ? " - " + target.ipv4 : target.ipv6 ? " - " + target.ipv6 : ""}${target.tag ? " (" + target.tag + ")" : ""}`,
  }));

  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, checked } = e.target;
    setCheckedItems(prev => ({
      ...prev,
      [id]: checked,
    }));
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value } = e.target;
    setForm(prev => ({
      ...prev,
      [id]: value,
    }));
  };

  const handleReferencesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setForm(prev => ({
      ...prev,
      references: e.target.value.split("\n").filter(Boolean),
    }));
  };

  const handleSubmit = () => {
    const payload = {
      assessment_id: assessmentId,
      category_id: selectedVulnerability?.value,
      target_id: targetId,
      detailed_title: form.detailed_title,
      status: form.status,
      ...(assessment.cvss_versions["3.1"] ? { cvssv31_vector: form.cvssv31_vector } : {}),
      ...(assessment.cvss_versions["4.0"] ? { cvssv4_vector: form.cvssv4_vector } : {}),
      description: form.description,
      remediation: form.remediation,
      references: form.references,
      generic_remediation: checkedItems.generic_remediation,
    };

    const onSuccess = () => {
      toast.success(`Vulnerability ${vulnerabilityId ? "updated" : "added"}!`);
      navigate(-1);
    };

    if (vulnerabilityId) {
      putData(`/api/vulnerabilities/${vulnerabilityId}`, payload, onSuccess);
    } else {
      postData(`/api/vulnerabilities`, payload, onSuccess);
    }
  };

  return (
    <Card>
      <h2 className="text-xl font-bold">{vulnerabilityId ? "Edit Vulnerability" : "New Vulnerability"}</h2>
      <Grid className="grid-cols-2">
        <SelectWrapper
          label="Vulnerability category"
          id="category"
          options={vulnerabilitySelectOptions}
          value={selectedVulnerability}
          onChange={setSelectedVulnerability}
        />
        <Grid>
          <Checkbox
            id="all_categories"
            checked={checkedItems.all_categories}
            onChange={handleCheckboxChange}
            label="Show categories from all sources"
          />
          <Checkbox
            id="generic_remediation_checkbox"
            checked={checkedItems.generic_remediation}
            onChange={handleCheckboxChange}
            label="Generic remediation"
          />
        </Grid>
      </Grid>

      <Grid className="grid-cols-3">
        <Input
          label="Detailed title"
          type="text"
          id="detailed_title"
          placeholder="Additional detail"
          value={form.detailed_title}
          onChange={handleInputChange}
        />
        <SelectWrapper
          label="Target"
          id="target_id"
          options={targetOptions}
          value={targetOptions.find(opt => opt.value === targetId) || null}
          onChange={option => setTargetId(option.value)}
        />
        <SelectWrapper
          label="Status"
          id="status"
          options={[
            { value: "Open", label: "Open" },
            { value: "Closed", label: "Closed" },
          ]}
          value={form.status ? { value: form.status, label: form.status } : null}
          onChange={option =>
            setForm(prev => ({
              ...prev,
              status: option.value,
            }))
          }
        />
      </Grid>

      {assessment?.cvss_versions["3.1"] && (
        <CVSS31Wrapper
          value={form.cvssv31_vector}
          onChange={value =>
            setForm(prev => ({
              ...prev,
              cvssv31_vector: value,
            }))
          }
        />
      )}
      {assessment?.cvss_versions["4.0"] && (
        <CVSS40Wrapper
          value={form.cvssv4_vector}
          onChange={value =>
            setForm(prev => ({
              ...prev,
              cvssv4_vector: value,
            }))
          }
        />
      )}
      <Divider />
      <Grid className="grid-cols-2 !items-start">
        <Textarea
          id="generic_description"
          label="Generic description"
          placeholder="N/A"
          value={categoryDescription}
          rows={12}
          disabled
        />
        <Textarea
          id="description"
          label="Description"
          placeholder="Description here"
          value={form.description}
          rows={12}
          onChange={handleInputChange}
        />
        <Textarea
          id="generic_remediation"
          label="Generic remediation"
          placeholder="N/A"
          value={categoryRemediation}
          className={checkedItems.generic_remediation ? "" : "opacity-50"}
          disabled
        />
        <Textarea
          id="remediation"
          label="Remediation"
          placeholder="Remediation here"
          value={form.remediation}
          onChange={handleInputChange}
        />
        <Textarea
          id="category_references"
          label="Category references"
          placeholder="N/A"
          value={categoryReferences.join("\n")}
          onChange={handleReferencesChange}
          disabled
        />
        <Textarea
          id="additional_references"
          label="References"
          placeholder="Additional references here"
          value={form.references?.join("\n")}
          onChange={handleReferencesChange}
        />
      </Grid>
      <Divider />
      <Buttons>
        <Button text={vulnerabilityId ? "Update" : "Submit"} onClick={handleSubmit} />
        <Button variant="secondary" text="Cancel" onClick={() => navigate(-1)} />
      </Buttons>
    </Card>
  );
}
