import { useContext, useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router";
import { toast } from "react-toastify";
import { getData, patchData, postData } from "../api/api";
import { GlobalContext } from "../App";
import Card from "../components/CardBox/Card";
import Grid from "../components/Composition/Grid";
import CVSS31Wrapper from "../components/CVSS/CVSS31Wrapper/CVSS31Wrapper";
import CVSS40Wrapper from "../components/CVSS/CVSS40Wrapper/CVSS40Wrapper";
import Divider from "../components/Divider";
import Button from "../components/Form/Button";
import Buttons from "../components/Form/Buttons";
import Checkbox from "../components/Form/Checkbox";
import Input from "../components/Form/Input";
import SelectWrapper from "../components/Form/SelectWrapper";
import { SelectOption } from "../components/Form/SelectWrapper.types";
import Textarea from "../components/Form/Textarea";
import { Assessment, Category, Target, Vulnerability } from "../types/common.types";

export default function VulnerabilityUpsert() {
  const { assessmentId, vulnerabilityId } = useParams<{ assessmentId: string; vulnerabilityId?: string }>();
  const {
    useCtxCustomer: [ctxCustomer],
  } = useContext(GlobalContext);
  const navigate = useNavigate();

  const [categories, setCategories] = useState<Category[]>([]);
  const [targets, setTargets] = useState<Target[]>([]);
  const [assessment, setAssessment] = useState<Assessment | null>(null);
  const [selectedVulnerability, setSelectedVulnerability] = useState<SelectOption | null>(null);
  const [targetId, setTargetId] = useState<string>("");
  const [checkedItems, setCheckedItems] = useState({
    generic_remediation: true,
  });
  const [form, setForm] = useState({
    detailed_title: "",
    cvssv31_vector: "",
    cvssv4_vector: "",
    description: "",
    remediation: "",
    references: [],
  });

  useEffect(() => {
    getData<Category[]>(
      "/api/categories",
      data => setCategories(data),
      err => toast.error(err.response.data.error)
    );
    getData<Target[]>(
      `/api/customers/${ctxCustomer.id}/targets`,
      data => setTargets(data),
      err => toast.error(err.response.data.error)
    );
    if (ctxCustomer.id && assessmentId) {
      getData<Assessment>(
        `/api/customers/${ctxCustomer.id}/assessments/${assessmentId}`,
        data => setAssessment(data),
        err => toast.error(err.response.data.error)
      );
    }
  }, [ctxCustomer.id, assessmentId]);

  useEffect(() => {
    getData<Vulnerability>(
      `/api/assessments/${assessmentId}/vulnerabilities/${vulnerabilityId}`,
      data => {
        setSelectedVulnerability({
          label: `${data.category.index} - ${data.category.name}`,
          value: data.category.id,
        });
        setTargetId(data.target.id);
        setForm({
          detailed_title: data.detailed_title,
          cvssv31_vector: data.cvssv31.cvss_vector,
          cvssv4_vector: data.cvssv4.cvss_vector,
          description: data.description,
          remediation: data.remediation,
          references: data.references,
        });
        setCheckedItems({
          generic_remediation: data.generic_remediation?.enabled ?? false,
        });
      },
      err => toast.error(err.response.data.error)
    );
  }, [assessmentId, vulnerabilityId]);

  const vulnerabilitySelectOptions: SelectOption[] = categories.map(item => ({
    label: `${item.index} - ${item.name}`,
    value: item.id,
  }));

  const targetOptions: SelectOption[] = targets.map(target => ({
    value: target.id,
    label: `${target.fqdn}${target.ipv4 ? " - " + target.ipv4 : target.ipv6 ? " - " + target.ipv6 : ""}${target.name ? " - " + target.name : ""}`,
  }));

  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, checked } = e.target;
    setCheckedItems(prev => ({
      ...prev,
      [id]: checked,
    }));
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value } = e.target;
    setForm(prev => ({
      ...prev,
      [id]: value,
    }));
  };

  const handleReferencesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setForm(prev => ({
      ...prev,
      references: e.target.value.split("\n").filter(Boolean),
    }));
  };

  const handleSubmit = () => {
    const payload = {
      category: selectedVulnerability?.value,
      target_id: targetId,
      detailed_title: form.detailed_title,
      cvssv31_vector: form.cvssv31_vector,
      cvssv4_vector: form.cvssv4_vector,
      description: form.description,
      remediation: form.remediation,
      references: form.references,
      generic_remediation: checkedItems.generic_remediation,
    };

    const onSuccess = () => {
      toast.success(`Vulnerability ${vulnerabilityId ? "updated" : "added"}!`);
      navigate(-1);
    };
    const onError = (err: any) => toast.error(err.response.data.error);

    if (vulnerabilityId) {
      patchData(`/api/assessments/${assessmentId}/vulnerabilities/${vulnerabilityId}`, payload, onSuccess, onError);
    } else {
      postData(`/api/assessments/${assessmentId}/vulnerabilities`, payload, onSuccess, onError);
    }
  };

  const cvssVersions = assessment?.cvss_versions || [];
  const hasCvss3 = cvssVersions.includes("3.1");
  const hasCvss4 = cvssVersions.includes("4.0");

  return (
    <Card>
      <h2 className="text-xl font-bold">{vulnerabilityId ? "Edit Vulnerability" : "Add Vulnerability"}</h2>
      <Grid className="grid-cols-2">
        <SelectWrapper
          label="Vulnerability"
          options={vulnerabilitySelectOptions}
          value={selectedVulnerability}
          onChange={setSelectedVulnerability}
        />
        <Input
          type="text"
          id="detailed_title"
          placeholder="Additional detail"
          value={form.detailed_title}
          onChange={handleInputChange}
        />
        <SelectWrapper
          label="Target"
          id="target_id"
          options={targetOptions}
          value={targetOptions.find(opt => opt.value === targetId) || null}
          onChange={option => setTargetId(option.value)}
        />
        <Grid>
          <div className="mb-4 flex gap-2">
            <Checkbox
              id="generic_remediation"
              checked={checkedItems.generic_remediation}
              onChange={handleCheckboxChange}
              htmlFor="generic_remediation"
              label="Generic remediation"
            />
          </div>
        </Grid>
      </Grid>
      {hasCvss3 && <CVSS31Wrapper />}
      {hasCvss4 && <CVSS40Wrapper />}
      <Divider />
      <Textarea
        id="description"
        label="Description"
        placeholder="Description here"
        value={form.description}
        onChange={handleInputChange}
      />
      <Textarea
        id="remediation"
        label="Remediation"
        placeholder="Remediation here"
        value={form.remediation}
        onChange={handleInputChange}
      />
      <Textarea
        id="references"
        label="References"
        placeholder="Additional references here"
        value={form.references.join("\n")}
        onChange={handleReferencesChange}
      />
      <Divider />
      <Buttons>
        <Button text={vulnerabilityId ? "Update" : "Submit"} onClick={handleSubmit} />
        <Button type="secondary" text="Cancel" onClick={() => navigate(-1)} />
      </Buttons>
    </Card>
  );
}
