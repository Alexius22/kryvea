import { mdiTabSearch } from "@mdi/js";
import { useEffect, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router";
import { getData } from "../api/api";
import Card from "../components/Composition/Card";
import Divider from "../components/Composition/Divider";
import Flex from "../components/Composition/Flex";
import Grid from "../components/Composition/Grid";
import PageHeader from "../components/Composition/PageHeader";
import Table from "../components/Composition/Table";
import Button from "../components/Form/Button";
import DateCalendar from "../components/Form/DateCalendar";
import Input from "../components/Form/Input";
import { Vulnerability } from "../types/common.types";
import { formatDate } from "../utils/dates";
import { getPageTitle } from "../utils/helpers";

const searchAPI = `/api/vulnerabilities/search?`;
const DEFAULT_PAGE = 1;
const DEFAULT_LIMIT = 50;

export default function VulnerabilitySearch() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [totalVulnerabilities, setTotalVulnerabilities] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  const location = useLocation();
  const params = new URLSearchParams(location.search);

  const [query, setQuery] = useState(params.get("query") ?? "");
  const [user, setUser] = useState(params.get("user") ?? "");
  const [cvssScore, setCvssScore] = useState(params.get("cvss_score") ?? "");
  const [assessment, setAssessment] = useState(params.get("assessment") ?? "");
  const [customer, setCustomer] = useState(params.get("customer") ?? "");
  const [dateRange, setDateRange] = useState<{ start: string; end?: string }>({
    start: params.get("start_date_time") ?? "",
    end: params.get("end_date_time") ?? "",
  });

  const [page, setPage] = useState(Math.max(+params.get("page") || DEFAULT_PAGE, DEFAULT_PAGE));
  const [limit, setLimit] = useState(+params.get("limit") || DEFAULT_LIMIT);

  const navigate = useNavigate();

  useEffect(() => {
    document.title = getPageTitle("Vulnerability Search");
  }, []);

  // Sync state when URL changes (browser nav, etc.)
  useEffect(() => {
    setQuery(params.get("query") ?? "");
    setUser(params.get("user") ?? "");
    setCvssScore(params.get("cvss_score") ?? "");
    setAssessment(params.get("assessment") ?? "");
    setCustomer(params.get("customer") ?? "");
    setPage(Math.max(+params.get("page") || DEFAULT_PAGE, DEFAULT_PAGE));
    setLimit(+params.get("limit") || DEFAULT_LIMIT);
    setDateRange({
      start: params.get("start_date_time") ?? "",
      end: params.get("end_date_time") ?? "",
    });
  }, [location.search]);

  // Fetch data whenever search params change
  useEffect(() => {
    if (!location.search) return;

    getData<{ total_pages: number; total_documents: number; data: Vulnerability[] }>(
      searchAPI + location.search.substring(1),
      data => {
        setTotalVulnerabilities(data.total_documents);
        setVulnerabilities(data.data);
        setTotalPages(data.total_pages);
      }
    );
  }, [location.search]);

  const handleSearch = () => {
    const searchParams = new URLSearchParams({
      page: page.toString(),
      limit: limit.toString(),
    });

    if (query) searchParams.set("query", query);
    if (user) searchParams.set("user", user);
    if (cvssScore) searchParams.set("cvss_score", cvssScore);
    if (assessment) searchParams.set("assessment", assessment);
    if (customer) searchParams.set("customer", customer);
    if (dateRange.start) searchParams.set("start_date_time", dateRange.start);
    if (dateRange.end) searchParams.set("end_date_time", dateRange.end);

    navigate(`?${searchParams.toString()}`, { replace: false });
  };

  const handleClearAll = () => {
    setQuery("");
    setUser("");
    setCvssScore("");
    setAssessment("");
    setCustomer("");
    setDateRange({ start: "", end: "" });
    setPage(DEFAULT_PAGE);
    setLimit(DEFAULT_LIMIT);

    navigate({ pathname: location.pathname, search: "" });
  };

  return (
    <div>
      <PageHeader icon={mdiTabSearch} title="Vulnerability Search" />
      <Grid className="gap-4">
        <Card>
          <Grid className="grid-cols-3 gap-4">
            <Input
              type="text"
              id="search"
              label="Search"
              placeholder="Search query"
              value={query}
              onChange={e => setQuery(e.target.value)}
            />
            <Input
              type="text"
              id="user"
              label="User"
              placeholder="User"
              value={user}
              onChange={e => setUser(e.target.value)}
            />
            <DateCalendar
              idStart="start_date_time"
              label="Range date"
              isRange
              value={dateRange}
              onChange={val => {
                const { start, end } = val as { start: string; end: string };
                setDateRange({ start, end });
              }}
              placeholder={{ start: "Start date", end: "End date" }}
            />
            <Input
              type="text"
              id="cvss_score"
              label="CVSS score range"
              placeholder="CVSS score range"
              value={cvssScore}
              onChange={e => setCvssScore(e.target.value)}
            />
            <Input
              type="text"
              id="assessment"
              label="Assessment"
              placeholder="Assessment name"
              value={assessment}
              onChange={e => setAssessment(e.target.value)}
            />
            <Input
              type="text"
              id="customer"
              label="Customer"
              placeholder="Customer name"
              value={customer}
              onChange={e => setCustomer(e.target.value)}
            />
          </Grid>
          <Divider />
          <Flex items="center" justify="between">
            <span>
              Total vulnerabilities found: <b>{totalVulnerabilities}</b>
            </span>
            <Flex className="gap-2">
              <Button text="Clear all" variant="outline-only" onClick={handleClearAll} />
              <Button text="Search" onClick={handleSearch} />
            </Flex>
          </Flex>
        </Card>

        <Table
          data={vulnerabilities?.map(vulnerability => ({
            Vulnerability: (
              <Link
                to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities/${vulnerability.id}`}
                title={
                  vulnerability.detailed_title
                    ? `${vulnerability.category.index} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                    : `${vulnerability.category.index} - ${vulnerability.category.name}`
                }
              >
                {vulnerability.detailed_title
                  ? `${vulnerability.category.index} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                  : `${vulnerability.category.index} - ${vulnerability.category.name}`}
              </Link>
            ),
            Description: vulnerability.description,
            "CVSSv3.1 Score": vulnerability.cvssv31.score,
            "CVSSv4.0 Score": vulnerability.cvssv4.score,
            Assessment: (
              <Link
                to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities`}
                title={vulnerability.assessment.name}
              >
                {vulnerability.assessment.name}
              </Link>
            ),
            "Last update": formatDate(vulnerability.updated_at),
            User: vulnerability.user.username,
          }))}
          perPageCustom={limit}
          maxWidthColumns={{
            Vulnerability: "30rem",
            Description: "20rem",
            Assessment: "20rem",
          }}
          backendCurrentPage={page}
          backendTotalRows={totalVulnerabilities}
          backendTotalPages={totalPages}
          backendSearch={query}
          onBackendSearch={setQuery}
          onBackendChangePage={setPage}
          onBackendChangePerPage={setLimit}
        />
      </Grid>
    </div>
  );
}
