import { mdiTabSearch } from "@mdi/js";
import { useEffect, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router";
import { getData } from "../api/api";
import PageHeader from "../components/Composition/PageHeader";
import Table from "../components/Composition/Table";
import { useDebounce } from "../hooks/useDebounce";
import { Vulnerability } from "../types/common.types";
import { formatDate } from "../utils/dates";
import { getPageTitle } from "../utils/helpers";

const searchAPI = `/api/vulnerabilities/search?`;
const DEFAULT_QUERY = "";
const DEFAULT_PAGE = 1;
const DEFAULT_LIMIT = 50;

export default function VulnerabilitySearch() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [totalVulnerabilities, setTotalVulnerabilities] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  const location = useLocation();
  const params = new URLSearchParams(location.search);

  const [query, setQuery] = useState(params.get("query") ?? DEFAULT_QUERY);
  const [page, setPage] = useState(Math.max(+params.get("page") || DEFAULT_PAGE, DEFAULT_PAGE));
  const [limit, setLimit] = useState(+params.get("limit") || DEFAULT_LIMIT);

  const navigate = useNavigate();
  const debouncedQuery = useDebounce(query, 400);

  useEffect(() => {
    document.title = getPageTitle("Vulnerability Search");
  }, []);

  // Keep state in sync when user navigates via browser buttons
  useEffect(() => {
    setQuery(params.get("query") ?? DEFAULT_QUERY);
    setPage(Math.max(+params.get("page") || DEFAULT_PAGE, DEFAULT_PAGE));
    setLimit(+params.get("limit") || DEFAULT_LIMIT);
  }, [location.search]);

  useEffect(() => {
    const searchParams = new URLSearchParams({
      query: debouncedQuery,
      page: page.toString(),
      limit: limit.toString(),
    }).toString();

    if (location.search !== `?${searchParams}`) {
      navigate(`?${searchParams}`, { replace: false });
    }

    getData<{ total_pages: number; total_documents: number; data: Vulnerability[] }>(searchAPI + searchParams, data => {
      setTotalVulnerabilities(data.total_documents);
      setVulnerabilities(data.data);
      setTotalPages(data.total_pages);
    });
  }, [debouncedQuery, limit, page]);

  return (
    <div>
      <PageHeader icon={mdiTabSearch} title="Vulnerability Search" />
      <span>Total vulnerabilities: {totalVulnerabilities}</span>
      <Table
        defaultFilterText={query}
        data={vulnerabilities?.map(vulnerability => ({
          Vulnerability: (
            <Link
              to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities/${vulnerability.id}`}
              title={
                vulnerability.detailed_title
                  ? `${vulnerability.category.index} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                  : `${vulnerability.category.index} - ${vulnerability.category.name}`
              }
            >
              {vulnerability.detailed_title
                ? `${vulnerability.category.index} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                : `${vulnerability.category.index} - ${vulnerability.category.name}`}
            </Link>
          ),
          Description: vulnerability.description,
          "CVSSv3.1 Score": vulnerability.cvssv31.score,
          "CVSSv4.0 Score": vulnerability.cvssv4.score,
          Assessment: (
            <Link
              to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities`}
              title={vulnerability.assessment.name}
            >
              {vulnerability.assessment.name}
            </Link>
          ),
          "Last update": formatDate(vulnerability.updated_at),
          User: vulnerability.user.username,
        }))}
        perPageCustom={limit}
        maxWidthColumns={{
          Vulnerability: "30rem",
          Description: "20rem",
          Assessment: "20rem",
        }}
        backendCurrentPage={page}
        backendTotalRows={totalVulnerabilities}
        backendTotalPages={totalPages}
        backendSearch={query}
        onBackendSearch={setQuery}
        onBackendChangePage={setPage}
        onBackendChangePerPage={setLimit}
      />
    </div>
  );
}
