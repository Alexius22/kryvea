import { mdiMagnify } from "@mdi/js";
import { useEffect, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router";
import { getData } from "../api/api";
import Card from "../components/Composition/Card";
import Divider from "../components/Composition/Divider";
import Flex from "../components/Composition/Flex";
import Grid from "../components/Composition/Grid";
import PageHeader from "../components/Composition/PageHeader";
import Table from "../components/Composition/Table";
import Button from "../components/Form/Button";
import Checkbox from "../components/Form/Checkbox";
import DateCalendar from "../components/Form/DateCalendar";
import Input from "../components/Form/Input";
import Label from "../components/Form/Label";
import { useDebounce } from "../hooks/hooks";
import { Vulnerability } from "../types/common.types";
import { formatDate } from "../utils/dates";
import { getPageTitle } from "../utils/helpers";

const searchAPI = `/api/vulnerabilities/search?`;
const DEFAULT_QUERY = "";
const DEFAULT_PAGE = 1;
const DEFAULT_LIMIT = 50;
const CVSS_STEP = 0.1;

export default function VulnerabilitySearch() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [totalVulnerabilities, setTotalVulnerabilities] = useState(0);
  const [totalPages, setTotalPages] = useState(0);

  const location = useLocation();
  const urlSearchParams = new URLSearchParams(location.search);

  // Main search
  const [query, setQuery] = useState(urlSearchParams.get("query") ?? DEFAULT_QUERY);
  const debouncedQuery = useDebounce(query, 400);

  // Pagination
  const [page, setPage] = useState(Math.max(+urlSearchParams.get("page") || DEFAULT_PAGE, DEFAULT_PAGE));
  const [limit, setLimit] = useState(+urlSearchParams.get("limit") || DEFAULT_LIMIT);

  // Filters
  const [assessment, setAssessment] = useState(urlSearchParams.get("assessment") ?? "");
  const [user, setUser] = useState(urlSearchParams.get("user") ?? "");
  const [customer, setCustomer] = useState(urlSearchParams.get("customer") ?? "");
  const [dateRange, setDateRange] = useState<{ start: string; end: string }>({
    start: urlSearchParams.get("start_date_time") ?? "",
    end: urlSearchParams.get("end_date_time") ?? "",
  });
  const [cvss31Selected, setCvss31Selected] = useState<boolean>(
    Boolean(urlSearchParams.get("cvssv31.score.min") || urlSearchParams.get("cvssv31.score.max"))
  );
  const [cvss31Min, setCvss31Min] = useState(parseFloat(urlSearchParams.get("cvssv31.score.min")) || 0);
  const [cvss31Max, setCvss31Max] = useState(parseFloat(urlSearchParams.get("cvssv31.score.max")) || 0);
  const [cvss4Selected, setCvss4Selected] = useState(
    Boolean(urlSearchParams.get("cvssv4.score.min") || urlSearchParams.get("cvssv4.score.max"))
  );
  const [cvss4Min, setCvss4Min] = useState(parseFloat(urlSearchParams.get("cvssv4.score.min")) || 0);
  const [cvss4Max, setCvss4Max] = useState(parseFloat(urlSearchParams.get("cvssv4.score.max")) || 0);

  const navigate = useNavigate();

  const fetchVulnerabilitiesPaginated = searchParams =>
    getData<{ total_pages: number; total_documents: number; data: Vulnerability[] }>(searchAPI + searchParams, data => {
      setTotalVulnerabilities(data.total_documents);
      setVulnerabilities(data.data);
      setTotalPages(data.total_pages);
    });

  useEffect(() => {
    document.title = getPageTitle("Vulnerability Search");
    setQuery(urlSearchParams.get("query") ?? DEFAULT_QUERY);
  }, []);

  // Sync with URL when user uses browser buttons
  useEffect(() => {
    setPage(Math.max(+urlSearchParams.get("page") || DEFAULT_PAGE, DEFAULT_PAGE));
    setLimit(+urlSearchParams.get("limit") || DEFAULT_LIMIT);
    setAssessment(urlSearchParams.get("assessment") ?? "");
    setUser(urlSearchParams.get("user") ?? "");
    setCustomer(urlSearchParams.get("customer") ?? "");
    setCvss31Selected(Boolean(urlSearchParams.get("cvssv31.score.min") || urlSearchParams.get("cvssv31.score.max")));
    setCvss31Min(parseFloat(urlSearchParams.get("cvssv31.score.min")) || 0);
    setCvss31Max(parseFloat(urlSearchParams.get("cvssv31.score.max")) || 0);
    setCvss4Selected(Boolean(urlSearchParams.get("cvssv4.score.min") || urlSearchParams.get("cvssv4.score.max")));
    setCvss4Min(parseFloat(urlSearchParams.get("cvssv4.score.min")) || 0);
    setCvss4Max(parseFloat(urlSearchParams.get("cvssv4.score.max")) || 0);
    setDateRange({
      start: urlSearchParams.get("start_date_time") ?? "",
      end: urlSearchParams.get("end_date_time") ?? "",
    });
  }, [location.search]);

  // Fetch data
  useEffect(() => {
    const searchParams = buildSearchParams();

    if (location.search !== `?${searchParams}`) {
      navigate(`?${searchParams}`, { replace: false });
    }

    fetchVulnerabilitiesPaginated(searchParams);
  }, [debouncedQuery, limit, page]);

  // Build API params
  const buildSearchParams = () => {
    const sp = new URLSearchParams({
      query: debouncedQuery,
      page: page.toString(),
      limit: limit.toString(),
    });

    if (assessment) sp.set("assessment", assessment);
    if (user) sp.set("user", user);
    if (customer) sp.set("customer", customer);
    if (cvss31Selected) {
      if (cvss31Min) sp.set("cvssv31.score.min", cvss31Min.toString());
      if (cvss31Max) sp.set("cvssv31.score.max", cvss31Max.toString());
    }
    if (cvss4Selected) {
      if (cvss4Min) sp.set("cvssv4.score.min", cvss4Min.toString());
      if (cvss4Max) sp.set("cvssv4.score.max", cvss4Max.toString());
    }
    if (dateRange.start) sp.set("start_date_time", dateRange.start);
    if (dateRange.end) sp.set("end_date_time", dateRange.end);

    return sp.toString();
  };

  // Actions
  const handleSearch = () => {
    setPage(1); // reset page
    const searchParams = buildSearchParams();
    navigate(`?${searchParams}`);
    fetchVulnerabilitiesPaginated(searchParams);
  };

  const handleClearAll = () => {
    setQuery("");
    setAssessment("");
    setUser("");
    setCustomer("");
    setCvss31Max(undefined);
    setCvss31Min(undefined);
    setCvss4Max(undefined);
    setCvss4Min(undefined);
    setDateRange({ start: "", end: "" });
    setPage(DEFAULT_PAGE);
    setLimit(DEFAULT_LIMIT);
    navigate("?");
  };

  return (
    <div>
      <PageHeader icon={mdiMagnify} title="Vulnerability Search" />
      <Grid className="gap-4">
        <Card>
          <Grid className="w-full max-w-full grid-cols-[3fr_3fr_0.5fr_0.5fr] gap-6">
            {/* Row 1 */}
            <Input
              type="text"
              id="assessment"
              label="Assessment"
              placeholder="Assessment name"
              value={assessment}
              onChange={e => setAssessment(e.target.value)}
              onEnter={handleSearch}
            />

            <Input
              type="text"
              id="user"
              label="User"
              placeholder="User"
              value={user}
              onChange={e => setUser(e.target.value)}
              onEnter={handleSearch}
            />

            <Grid className="h-full !items-start justify-center">
              <Label text="&nbsp;" />
              <Checkbox
                id="cvss_3.1"
                label="CVSS v3.1"
                checked={cvss31Selected}
                onChange={e => {
                  setCvss31Selected(e.target.checked);
                  handleSearch();
                }}
              />
            </Grid>

            <Grid className="h-full !items-start justify-center">
              <Label text="&nbsp;" />
              <Checkbox
                id="cvss_4"
                label="CVSS v4.0"
                checked={cvss4Selected}
                onChange={e => {
                  setCvss4Selected(e.target.checked);
                  handleSearch();
                }}
              />
            </Grid>

            {/* Row 2 */}
            <DateCalendar
              idStart="start_date_time"
              label="Range date"
              isRange
              value={dateRange}
              onChange={val => {
                const { start, end } = val as { start: string; end: string };
                setDateRange({ start, end });
              }}
              placeholder={{ start: "Start date", end: "End date" }}
            />

            <Input
              type="text"
              id="customer"
              label="Customer"
              placeholder="Customer name"
              value={customer}
              onChange={e => setCustomer(e.target.value)}
              onEnter={handleSearch}
            />

            <Flex className="gap-2" justify="center">
              <Input
                className="w-11 text-center"
                disabled={!cvss31Selected}
                type="number"
                step={CVSS_STEP}
                min={0}
                max={10}
                id="cvss_3.1_min"
                label="Min"
                placeholder="Min"
                value={cvss31Min}
                onChange={setCvss31Min}
                onEnter={handleSearch}
              />
              <Input
                className="w-11 text-center"
                disabled={!cvss31Selected}
                type="number"
                step={CVSS_STEP}
                min={0}
                max={10}
                id="cvss_3.1_max"
                label="Max"
                placeholder="Max"
                value={cvss31Max}
                onChange={setCvss31Max}
                onEnter={handleSearch}
              />
            </Flex>

            <Flex className="gap-2" justify="center">
              <Input
                className="w-11 text-center"
                disabled={!cvss4Selected}
                type="number"
                step={CVSS_STEP}
                min={0}
                max={10}
                id="cvss_4_min"
                label="Min"
                placeholder="Min"
                value={cvss4Min}
                onChange={setCvss4Min}
                onEnter={handleSearch}
              />
              <Input
                className="w-11 text-center"
                disabled={!cvss4Selected}
                type="number"
                step={CVSS_STEP}
                min={0}
                max={10}
                id="cvss_4_max"
                label="Max"
                placeholder="Max"
                value={cvss4Max}
                onChange={setCvss4Max}
                onEnter={handleSearch}
              />
            </Flex>
          </Grid>
          <Divider />
          <Flex items="center" justify="between">
            <span>
              Total vulnerabilities found: <b>{totalVulnerabilities}</b>
            </span>
            <Flex className="gap-2">
              <Button text="Clear all" variant="outline-only" onClick={handleClearAll} />
              <Button text="Search" onClick={handleSearch} />
            </Flex>
          </Flex>
        </Card>

        <Table
          backendCurrentPage={page}
          backendTotalRows={totalVulnerabilities}
          backendTotalPages={totalPages}
          backendSearch={query}
          onBackendSearch={setQuery}
          onBackendChangePage={setPage}
          onBackendChangePerPage={setLimit}
          data={vulnerabilities?.map(vulnerability => ({
            Vulnerability: (
              <Link
                to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities/${vulnerability.id}`}
                title={
                  vulnerability.detailed_title
                    ? `${vulnerability.category.identifier} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                    : `${vulnerability.category.identifier} - ${vulnerability.category.name}`
                }
              >
                {vulnerability.detailed_title
                  ? `${vulnerability.category.identifier} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                  : `${vulnerability.category.identifier} - ${vulnerability.category.name}`}
              </Link>
            ),
            Description: vulnerability.description,
            "CVSSv3.1 Score": vulnerability.cvssv31.score,
            "CVSSv4.0 Score": vulnerability.cvssv4.score,
            Assessment: (
              <Link
                to={`/customers/${vulnerability.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities`}
                title={vulnerability.assessment.name}
              >
                {vulnerability.assessment.name}
              </Link>
            ),
            Customer: (
              <Link to={`/customers/${vulnerability.customer.id}`} title={vulnerability.customer.name}>
                {vulnerability.customer.name}
              </Link>
            ),
            "Last update": formatDate(vulnerability.updated_at),
            User: vulnerability.user.username,
          }))}
          perPageCustom={limit}
          maxWidthColumns={{
            Vulnerability: "30rem",
            Description: "20rem",
            Assessment: "20rem",
          }}
        />
      </Grid>
    </div>
  );
}
