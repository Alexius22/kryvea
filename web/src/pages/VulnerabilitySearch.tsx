import { mdiTabSearch } from "@mdi/js";
import { useEffect, useMemo, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router";
import { getData } from "../api/api";
import PageHeader from "../components/Composition/PageHeader";
import Table from "../components/Composition/Table";
import { useDebounce } from "../hooks/useDebounce";
import { Vulnerability } from "../types/common.types";
import { formatDate } from "../utils/dates";
import { getPageTitle } from "../utils/helpers";

export default function VulnerabilitySearch() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loadingVulnerabilities, setLoadingVulnerabilities] = useState(true);
  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const [query, setQuery] = useState(params.get("query") ?? "");

  const navigate = useNavigate();

  const debouncedQuery = useDebounce(query, 500);

  const encodedQuery = useMemo(() => (query === "" ? "" : `?query=${encodeURIComponent(query)}`), [debouncedQuery]);

  useEffect(() => {
    document.title = getPageTitle("Vulnerability Search");
  }, []);

  useEffect(() => {
    setQuery(params.get("query") ?? "");
  }, [location.search]);

  useEffect(() => {
    if (location.search !== encodedQuery) {
      // save query in URL to make it sharable and navigatable
      navigate(encodedQuery, { preventScrollReset: true });
    }

    setLoadingVulnerabilities(true);
    getData<Vulnerability[]>(`/api/vulnerabilities/search${encodedQuery}`, setVulnerabilities, undefined, () => {
      setLoadingVulnerabilities(false);
    });
  }, [debouncedQuery]);

  return (
    <div>
      <PageHeader icon={mdiTabSearch} title="Vulnerability Search" />
      <Table
        loading={loadingVulnerabilities}
        defaultFilterText={query}
        data={vulnerabilities?.map(vulnerability => ({
          Vulnerability: (
            <Link
              to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities/${vulnerability.id}`}
              title={
                vulnerability.detailed_title
                  ? `${vulnerability.category.index} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                  : `${vulnerability.category.index} - ${vulnerability.category.name}`
              }
            >
              {vulnerability.detailed_title
                ? `${vulnerability.category.index} - ${vulnerability.category.name} (${vulnerability.detailed_title})`
                : `${vulnerability.category.index} - ${vulnerability.category.name}`}
            </Link>
          ),
          Description: vulnerability.description,
          "CVSSv3.1 Score": vulnerability.cvssv31.score,
          "CVSSv4.0 Score": vulnerability.cvssv4.score,
          Assessment: (
            <Link
              to={`/customers/${vulnerability.target.customer.id}/assessments/${vulnerability.assessment.id}/vulnerabilities`}
              title={vulnerability.assessment.name}
            >
              {vulnerability.assessment.name}
            </Link>
          ),
          "Last update": formatDate(vulnerability.updated_at),
          User: vulnerability.user.username,
        }))}
        perPageCustom={50}
        maxWidthColumns={{ Vulnerability: "30rem", Description: "20rem", Assessment: "20rem" }}
        backendSearch={query}
        onBackendSearch={val => setQuery(val)}
      />
    </div>
  );
}
