import { mdiFileEdit } from "@mdi/js";
import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router";
import { toast } from "react-toastify";
import { getData } from "../api/api";
import Card from "../components/CardBox/Card";
import CardTitle from "../components/CardBox/CardTitle";
import Grid from "../components/Composition/Grid";
import Button from "../components/Form/Button";
import Buttons from "../components/Form/Buttons";
import SectionTitleLineWithButton from "../components/Section/SectionTitleLineWithButton";
import { Poc, Vulnerability } from "../types/common.types";

function PocItem({ poc }) {
  switch (poc.type) {
    case "request":
      return (
        <section>
          <p className="mb-6">{poc.description}</p>
          <div className="flex gap-6">
            <div className="req-res-text">
              <h3 className="req-res">HTTP Request</h3>
              {poc.uri && <div className="mb-1 text-sm text-gray-600">URI: {poc.uri}</div>}
              <pre>
                <code>{poc.request}</code>
              </pre>
            </div>
            <div className="req-res-text">
              <h3 className="req-res">HTTP Response</h3>
              <pre>
                <code>{poc.response}</code>
              </pre>
            </div>
          </div>
        </section>
      );
    case "image":
      return (
        <section>
          <p className="mb-4">{poc.description}</p>
          <figure className="inline-block text-center">
            <img src={`data:image/png;base64,${poc.image_data}`} alt={poc.image_caption || poc.description} />
            <figcaption className="mt-2 text-sm italic">{poc.image_caption}</figcaption>
          </figure>
        </section>
      );
    case "text":
      return (
        <section>
          <p className="mb-4">{poc.description}</p>
          <pre className="req-res-text">
            <code>{poc.text_data}</code>
          </pre>
        </section>
      );
    default:
      return null;
  }
}

// Helper: Extract all non-empty CVSS objects from the vulnerability
function getCvssList(vuln) {
  const versions = ["cvssv2", "cvssv3", "cvssv31", "cvssv4"];
  return versions
    .map(ver => ({
      version: ver,
      ...vuln[ver],
    }))
    .filter(cvss => cvss && (cvss.cvss_score > 0 || cvss.cvss_vector || cvss.cvss_severity || cvss.cvss_description));
}

export default function VulnerabilityDetailPage() {
  const { assessmentId, vulnerabilityId } = useParams();
  const navigate = useNavigate();

  const [vulnerability, setVulnerability] = useState(null);
  const [pocs, setPocs] = useState([]);

  useEffect(() => {
    document.title = "Vulnerability detail";

    getData<Vulnerability>(
      `/api/assessments/${assessmentId}/vulnerabilities/${vulnerabilityId}`,
      data => setVulnerability(data),
      err => {
        toast.error(err.response.data.error);
      }
    );

    getData<Poc[]>(
      `/api/vulnerabilities/${vulnerabilityId}/pocs`,
      data => setPocs(data),
      err => {
        toast.error(err.response.data.error);
      }
    );
  }, [assessmentId, vulnerabilityId]);

  if (!vulnerability) {
    return null;
  }

  const cvssList = getCvssList(vulnerability);

  return (
    <div>
      <SectionTitleLineWithButton icon={undefined} title={vulnerability.detailed_title} main>
        <Buttons>
          <Button
            icon={mdiFileEdit}
            text="Edit Vulnerability"
            small
            onClick={() => navigate(`/assessments/${assessmentId}/vulnerabilities/${vulnerabilityId}`)}
          />
          <Button
            icon={mdiFileEdit}
            text="Edit PoC"
            small
            onClick={() => navigate(`/vulnerabilities/${vulnerabilityId}/pocs/edit`)}
          />
        </Buttons>
      </SectionTitleLineWithButton>

      <Grid className="gap-4">
        <Card className="flex overflow-hidden !p-0">
          {(() => {
            const labelColWidth = 15;
            const cvssColCount = cvssList.length;
            const cvssColWidth = 85 / cvssColCount;

            return (
              <table className="table" style={{ width: "100%" }}>
                <colgroup>
                  <col style={{ width: `${labelColWidth}%` }} />
                  {cvssList.map((_, idx) => (
                    <col key={idx} style={{ width: `${cvssColWidth}%` }} />
                  ))}
                </colgroup>
                <thead>
                  <tr>
                    <th></th>
                    {cvssList.map((cvss, idx) => (
                      <th className="text-center" key={idx}>
                        CVSSv{cvss.cvss_version}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th>Severity</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.cvss_severity || "N/A"}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Score</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.cvss_score || "N/A"}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Vector</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.cvss_vector || "N/A"}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Description</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="content-start text-justify" key={idx}>
                        {cvss.cvss_description || "N/A"}
                      </td>
                    ))}
                  </tr>
                </tbody>
              </table>
            );
          })()}
        </Card>

        <Card className="flex overflow-hidden !p-0">
          <table className="table" style={{ width: "100%" }}>
            <colgroup>
              <col style={{ width: "10%" }} />
              <col style={{ width: "90%" }} />
            </colgroup>
            <tbody>
              <tr>
                <th>Generic description</th>
                <td>{vulnerability.generic_description.text}</td>
              </tr>
              <tr>
                <th>Detailed description</th>
                <td>{vulnerability.description}</td>
              </tr>
              <tr>
                <th>Remediation</th>
                <td>
                  {vulnerability.generic_remediation.enabled
                    ? vulnerability.generic_remediation.text
                    : vulnerability.remediation}
                </td>
              </tr>
              <tr>
                <th>References</th>
                <td>
                  <ul>
                    {(vulnerability.references || []).map((reference, index) => (
                      <li key={index}>{reference}</li>
                    ))}
                  </ul>
                </td>
              </tr>
              <tr>
                <th>Host</th>
                <td>
                  {(() => {
                    const ip = vulnerability.target.ipv4 || vulnerability.target.ipv6 || "";
                    if (ip) {
                      return ip + (vulnerability.target.fqdn ? ` - ${vulnerability.target.fqdn}` : "");
                    }
                    return vulnerability.target.fqdn;
                  })()}
                </td>
              </tr>
              <tr>
                <th>User</th>
                <td>{vulnerability.user.username}</td>
              </tr>
            </tbody>
          </table>
        </Card>

        <Card>
          <CardTitle title="Proofs of Concept" />
          {pocs.length === 0 ? (
            <div>No PoCs available for this vulnerability.</div>
          ) : (
            pocs.sort((a, b) => a.index - b.index).map(poc => <PocItem key={poc.id} poc={poc} />)
          )}
        </Card>
      </Grid>
    </div>
  );
}
