import { mdiFileEdit, mdiTransferUp } from "@mdi/js";
import type * as monaco from "monaco-editor";
import { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router";
import { getBlob, getData } from "../api/api";
import Card from "../components/Composition/Card";
import CardTitle from "../components/Composition/CardTitle";
import DescribedCode from "../components/Composition/DescribedCode";
import Divider from "../components/Composition/Divider";
import Flex from "../components/Composition/Flex";
import Grid from "../components/Composition/Grid";
import PageHeader from "../components/Composition/PageHeader";
import Button from "../components/Form/Button";
import Buttons from "../components/Form/Buttons";
import Checkbox from "../components/Form/Checkbox";
import CopyVulnerabilityModal from "../components/Modals/CopyVulnerabilityModal";
import MonacoCodeEditor from "../components/Poc/MonacoCodeEditor";
import { POC_TYPE_IMAGE, POC_TYPE_REQUEST_RESPONSE, POC_TYPE_TEXT } from "../components/Poc/Poc.consts";
import { PocDoc, PocImageDoc } from "../components/Poc/Poc.types";
import { uuidZero, Vulnerability } from "../types/common.types";
import { formatDate } from "../utils/dates";
import { getTargetLabel } from "../utils/targetLabel";

function PocImagePreview({ poc }: { poc: PocImageDoc }) {
  const [imageUrl, setImageUrl] = useState<string>();

  useEffect(() => {
    if (!poc.image_id || poc.image_id === uuidZero) {
      return;
    }

    getBlob(`/api/files/images/${poc.image_id}`, data => {
      const url = URL.createObjectURL(data);
      setImageUrl(url);
    });

    return () => {
      if (imageUrl) {
        URL.revokeObjectURL(imageUrl);
      }
    };
  }, [poc]);

  return (
    <figure className="inline-block text-center">
      <img src={imageUrl} alt={poc.image_caption || poc.description} className="vuln-detail-poc-img" />
      <figcaption className="mt-2 text-sm italic">{poc.image_caption}</figcaption>
    </figure>
  );
}

function PocItem({ poc }: { poc: PocDoc }) {
  const [formatReqJson, setFormatReqJson] = useState(false);
  const [formatResJson, setFormatResJson] = useState(false);
  const [reqLineWrap, setReqLineWrap] = useState(true);
  const [resLineWrap, setResLineWrap] = useState(true);
  const [reqMinimap, setReqMinimap] = useState(false);
  const [resMinimap, setResMinimap] = useState(false);
  const [textLineWrap, setTextLineWrap] = useState(true);
  const [textMinimap, setTextMinimap] = useState(false);

  const httpOptions: monaco.editor.IStandaloneEditorConstructionOptions = {
    readOnly: true,
    minimap: { enabled: false },
  };

  switch (poc.type) {
    case POC_TYPE_REQUEST_RESPONSE:
      const [reqHeaders, reqBody] = (poc?.request ?? "")?.split("\n\n");
      const [resHeaders, resBody] = (poc?.response ?? "")?.split("\n\n");

      let prettyRequestJson = poc.request;
      let prettyResponseJson = poc.response;

      let requestJsonStartingLine = 0xabadcafe;
      let responseJsonStartingLine = 0xabadcafe;

      if (formatReqJson) {
        try {
          const requestJsonFormatted = JSON.stringify(JSON.parse(reqBody), null, 2);
          prettyRequestJson = `${reqHeaders}\n\n${requestJsonFormatted}`;
          requestJsonStartingLine = (`${reqHeaders}\n\n`.match(/\n/g) || []).length + 2;
        } catch (e) {
          prettyRequestJson = poc.request;
        }
      }

      if (formatResJson) {
        try {
          const responseJsonFormatted = JSON.stringify(JSON.parse(resBody), null, 2);
          prettyResponseJson = `${resHeaders}\n\n${responseJsonFormatted}`;
          responseJsonStartingLine = (`${resHeaders}\n\n`.match(/\n/g) || []).length + 2;
        } catch (e) {
          prettyResponseJson = poc.response;
        }
      }

      return (
        <Grid className="@container">
          <p>{poc.description}</p>
          {poc.uri && <p className="mb-1 text-sm">{poc.uri}</p>}
          <div className="grid grid-cols-1 gap-4 @[1300px]:grid-cols-2">
            <div className="vuln-detail-req-res-body">
              <h3 className="vuln-detail-req-res-header sticky left-0">
                Request
                <Checkbox
                  id={`poc-${poc.index}-request-format-json`}
                  label="Format JSON"
                  onChange={e => setFormatReqJson(e.target.checked)}
                  checked={formatReqJson}
                />
                <Checkbox
                  id={`poc-${poc.index}-request-line-wrap`}
                  label="Line wrap"
                  onChange={e => setReqLineWrap(e.target.checked)}
                  checked={reqLineWrap}
                />
                <Checkbox
                  id={`poc-${poc.index}-request-minimap`}
                  label="Minimap"
                  onChange={e => setReqMinimap(e.target.checked)}
                  checked={reqMinimap}
                />
              </h3>
              <MonacoCodeEditor
                language={"http"}
                value={prettyRequestJson}
                stopLineNumberAt={requestJsonStartingLine}
                options={{
                  ...httpOptions,
                  wordWrap: reqLineWrap ? "on" : "off",
                  minimap: {
                    enabled: reqMinimap,
                  },
                }}
                textHighlights={poc.request_highlights}
              />
            </div>
            <div className="vuln-detail-req-res-body">
              <h3 className="vuln-detail-req-res-header sticky left-0">
                Response
                <Checkbox
                  id={`poc-${poc.index}-response-format-json`}
                  label="Format JSON"
                  onChange={e => setFormatResJson(e.target.checked)}
                  checked={formatResJson}
                />
                <Checkbox
                  id={`poc-${poc.index}-response-line-wrap`}
                  label="Line wrap"
                  onChange={e => setResLineWrap(e.target.checked)}
                  checked={resLineWrap}
                />
                <Checkbox
                  id={`poc-${poc.index}-response-minimap`}
                  label="Minimap"
                  onChange={e => setResMinimap(e.target.checked)}
                  checked={resMinimap}
                />
              </h3>
              <MonacoCodeEditor
                language={"http"}
                value={prettyResponseJson}
                stopLineNumberAt={responseJsonStartingLine}
                options={{
                  ...httpOptions,
                  wordWrap: reqLineWrap ? "on" : "off",
                  minimap: {
                    enabled: resMinimap,
                  },
                }}
                textHighlights={poc.response_highlights}
              />
            </div>
          </div>
          <Divider />
        </Grid>
      );
    case POC_TYPE_IMAGE:
      return (
        <Grid>
          <p>{poc.description}</p>
          <PocImagePreview poc={poc} />
          <Divider />
        </Grid>
      );
    case POC_TYPE_TEXT:
      return (
        <Grid>
          <p>{poc.description}</p>
          <Flex className="gap-4 !opacity-100">
            <Checkbox
              id={`poc-${poc.index}-text-line-wrap`}
              label="Line wrap"
              onChange={e => setTextLineWrap(e.target.checked)}
              checked={textLineWrap}
            />
            <Checkbox
              id={`poc-${poc.index}-text-minimap`}
              label="Minimap"
              onChange={e => setTextMinimap(e.target.checked)}
              checked={textMinimap}
            />
          </Flex>
          <DescribedCode className="bg-[color:--bg-secondary] p-2" subtitle={poc.text_language}>
            <MonacoCodeEditor
              ideStartingLineNumber={poc.starting_line_number}
              language={poc.text_language}
              value={poc.text_data}
              options={{ readOnly: true, wordWrap: textLineWrap ? "on" : "off", minimap: { enabled: textMinimap } }}
              textHighlights={poc.text_highlights}
            />
          </DescribedCode>
          <Divider />
        </Grid>
      );
    default:
      return null;
  }
}

// Helper: Extract all non-empty CVSS objects from the vulnerability
function getCvssList(vuln) {
  const versions = ["cvssv2", "cvssv3", "cvssv31", "cvssv4"];
  return versions
    .map(ver => ({
      version: ver,
      ...vuln[ver],
    }))
    .filter(cvss => cvss && (cvss.score > 0 || cvss.vector || cvss.severity || cvss.description));
}

export default function VulnerabilityDetail() {
  const { assessmentId, vulnerabilityId } = useParams();
  const navigate = useNavigate();

  const [vulnerability, setVulnerability] = useState<Vulnerability>(null);
  const [pocs, setPocs] = useState<PocDoc[]>([]);

  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    getData<Vulnerability>(`/api/vulnerabilities/${vulnerabilityId}`, setVulnerability);
    getData<PocDoc[]>(`/api/vulnerabilities/${vulnerabilityId}/pocs`, setPocs);
  }, [assessmentId, vulnerabilityId]);

  const titleVulnerability = useMemo(() => {
    if (!vulnerability) {
      return "";
    }
    return `${vulnerability.category.identifier} - ${vulnerability.category.name}${
      vulnerability.detailed_title ? ` (${vulnerability.detailed_title})` : ""
    }`;
  }, [vulnerability]);

  useEffect(() => {
    if (titleVulnerability) {
      document.title = `${titleVulnerability} - Vulnerability detail`;
    }
  }, [titleVulnerability]);

  if (!vulnerability) {
    return null;
  }

  const cvssList = getCvssList(vulnerability);

  const openCopyModal = () => {
    setShowModal(true);
  };

  return (
    <div className="max-w-full">
      {/* Copy vulnerability Modal */}
      {showModal && <CopyVulnerabilityModal setShowModal={setShowModal} vulnerabilityId={vulnerabilityId} />}

      <PageHeader title={titleVulnerability} main>
        <Buttons className="justify-end" noWrap>
          <Button icon={mdiTransferUp} text="Copy to" small onClick={openCopyModal} />
          <Button icon={mdiFileEdit} text="Edit Vulnerability" small onClick={() => navigate(`edit`)} />
          <Button icon={mdiFileEdit} text="Edit PoC" small onClick={() => navigate(`pocs`)} />
        </Buttons>
      </PageHeader>

      <Grid className="gap-4">
        <Card className="flex overflow-hidden !p-0">
          <table className="table" style={{ width: "100%" }}>
            <colgroup>
              <col style={{ width: "10%" }} />
              <col style={{ width: "90%" }} />
            </colgroup>
            <tbody className="border-none">
              <tr>
                <th>Generic description</th>
                <td className="whitespace-break-spaces">{vulnerability.generic_description.text}</td>
              </tr>
              <tr>
                <th>Detailed description</th>
                <td className="whitespace-break-spaces">{vulnerability.description}</td>
              </tr>
              <tr>
                <th>Remediation</th>
                <td className="whitespace-break-spaces">
                  {vulnerability.generic_remediation.enabled
                    ? `${vulnerability.generic_remediation.text}${
                        vulnerability.remediation ? " " + vulnerability.remediation : ""
                      }`
                    : vulnerability.remediation}
                </td>
              </tr>
              <tr>
                <th>References</th>
                <td>
                  <ul>
                    {vulnerability.category.references?.concat(vulnerability.references).map((reference, index) => (
                      <li key={index}>{reference}</li>
                    ))}
                  </ul>
                </td>
              </tr>
              <tr>
                <th>Target</th>
                <td>{getTargetLabel(vulnerability.target)}</td>
              </tr>
              <tr>
                <th>Status</th>
                <td>{vulnerability.status}</td>
              </tr>
              <tr>
                <th>Last update</th>
                <td>{formatDate(vulnerability.updated_at)}</td>
              </tr>
              <tr>
                <th>User</th>
                <td>{vulnerability.user.username}</td>
              </tr>
            </tbody>
          </table>
        </Card>

        <Card className="overflow-x-auto !p-0">
          {(() => {
            const labelColWidth = 15;
            const cvssColCount = cvssList.length;
            const cvssColWidth = 85 / cvssColCount;

            return (
              <table className="vulnerability-detail-cvss-table">
                <colgroup>
                  <col style={{ width: `${labelColWidth}%` }} />
                  {cvssList.map((_, idx) => (
                    <col key={idx} style={{ width: `${cvssColWidth}%` }} />
                  ))}
                </colgroup>
                <thead>
                  <tr>
                    <th></th>
                    {cvssList.map((cvss, idx) => (
                      <th className="text-center" key={idx}>
                        CVSSv{cvss.version}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="border-none">
                  <tr>
                    <th>Severity</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.severity}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Score</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.score}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Vector</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.vector}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Description</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="content-start text-justify" key={idx}>
                        {cvss.description}
                      </td>
                    ))}
                  </tr>
                </tbody>
              </table>
            );
          })()}
        </Card>

        <Card>
          <CardTitle title="Proofs of Concept" />
          {pocs.length === 0 ? (
            <div className="font-thin text-[color:--border-primary-highlight]">
              No PoCs available for this vulnerability.
            </div>
          ) : (
            pocs.sort((a, b) => a.index - b.index).map((poc, i) => <PocItem key={`poc-preview-${i}`} poc={poc} />)
          )}
        </Card>
      </Grid>
    </div>
  );
}
