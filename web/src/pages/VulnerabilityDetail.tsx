import { mdiFileEdit } from "@mdi/js";
import axios from "axios";
import * as monaco from "monaco-editor";
import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router";
import { getData } from "../api/api";
import Card from "../components/CardBox/Card";
import CardTitle from "../components/CardBox/CardTitle";
import DescribedCode from "../components/Composition/DescribedCode";
import Grid from "../components/Composition/Grid";
import Divider from "../components/Divider";
import Button from "../components/Form/Button";
import Buttons from "../components/Form/Buttons";
import Checkbox from "../components/Form/Checkbox";
import MonacoCodeEditor from "../components/Poc/MonacoCodeEditor";
import { POC_TYPE_IMAGE, POC_TYPE_REQUEST_RESPONSE, POC_TYPE_TEXT } from "../components/Poc/Poc.consts";
import { PocDoc, PocImageDoc } from "../components/Poc/Poc.types";
import SectionTitleLineWithButton from "../components/Section/SectionTitleLineWithButton";
import { uuidZero, Vulnerability } from "../types/common.types";

function PocImagePreview({ poc }: { poc: PocImageDoc }) {
  const [imageUrl, setImageUrl] = useState<string>();

  useEffect(() => {
    if (!poc.image_id || poc.image_id === uuidZero) {
      return;
    }

    axios.get(`/api/files/images/${poc.image_id}`, { responseType: "blob" }).then(({ data }) => {
      const url = URL.createObjectURL(data);
      setImageUrl(url);
    });

    return () => {
      if (imageUrl) {
        URL.revokeObjectURL(imageUrl);
      }
    };
  }, [poc]);

  return (
    <figure className="inline-block text-center">
      <img src={imageUrl} alt={poc.image_caption || poc.description} className="vuln-detail-poc-img" />
      <figcaption className="mt-2 text-sm italic">{poc.image_caption}</figcaption>
    </figure>
  );
}

function PocItem({ poc }: { poc: PocDoc }) {
  const [formatReqJson, setFormatReqJson] = useState(false);
  const [formatResJson, setFormatResJson] = useState(false);

  const httpOptions: monaco.editor.IStandaloneEditorConstructionOptions = {
    readOnly: true,
    minimap: { enabled: false },
  };

  switch (poc.type) {
    case POC_TYPE_REQUEST_RESPONSE:
      const [reqHeaders, reqBody] = (poc?.request ?? "")?.split("\r\n\r\n");
      const [resHeaders, resBody] = (poc?.response ?? "")?.split("\r\n\r\n");

      let prettyRequestJson = poc.request;
      let prettyResponseJson = poc.response;

      let requestJsonStartingLine = Infinity;
      let responseJsonStartingLine = Infinity;

      if (formatReqJson) {
        try {
          const requestJsonFormatted = JSON.stringify(JSON.parse(reqBody), null, 2);
          prettyRequestJson = `${reqHeaders}\r\n\r\n${requestJsonFormatted}`;
          requestJsonStartingLine = (`${reqHeaders}\r\n\r\n`.match(/\r\n/g) || []).length + 2;
        } catch (e) {
          prettyRequestJson = poc.request;
        }
      }

      if (formatResJson) {
        try {
          const responseJsonFormatted = JSON.stringify(JSON.parse(resBody), null, 2);
          prettyResponseJson = `${resHeaders}\r\n\r\n${responseJsonFormatted}`;
          responseJsonStartingLine = (`${resHeaders}\r\n\r\n`.match(/\r\n/g) || []).length + 2;
        } catch (e) {
          prettyResponseJson = poc.response;
        }
      }

      return (
        <section className="@container">
          <p>{poc.description}</p>
          {poc.uri && <p className="mb-1">{poc.uri}</p>}
          <div className="grid grid-cols-1 gap-4 @[1300px]:grid-cols-2">
            <div className="vuln-detail-req-res-body">
              <h3 className="vuln-detail-req-res-header sticky left-0">
                Request
                <Checkbox
                  id={`poc-${poc.index}-request`}
                  label="Format JSON"
                  onChange={e => setFormatReqJson(e.target.checked)}
                />
              </h3>
              <MonacoCodeEditor
                language={"http"}
                value={prettyRequestJson}
                stopLineNumberAt={requestJsonStartingLine}
                options={httpOptions}
                textHighlights={poc.request_highlights}
              />
            </div>
            <div className="vuln-detail-req-res-body">
              <h3 className="vuln-detail-req-res-header sticky left-0">
                Response
                <Checkbox
                  id={`poc-${poc.index}-response`}
                  label="Format JSON"
                  onChange={e => setFormatResJson(e.target.checked)}
                />
              </h3>
              <MonacoCodeEditor
                language={"http"}
                value={prettyResponseJson}
                stopLineNumberAt={responseJsonStartingLine}
                options={httpOptions}
                textHighlights={poc.response_highlights}
              />
            </div>
          </div>
          <Divider />
        </section>
      );
    case POC_TYPE_IMAGE:
      return (
        <section>
          <p className="mb-4">{poc.description}</p>
          <PocImagePreview poc={poc} />
          <Divider />
        </section>
      );
    case POC_TYPE_TEXT:
      return (
        <section>
          <p className="mb-4">{poc.description}</p>
          <DescribedCode className="bg-[color:--bg-secondary] p-2" subtitle={poc.text_language}>
            <MonacoCodeEditor
              language={poc.text_language}
              value={poc.text_data}
              options={{ readOnly: true }}
              textHighlights={poc.text_highlights}
            />
          </DescribedCode>
          <Divider />
        </section>
      );
    default:
      return null;
  }
}

// Helper: Extract all non-empty CVSS objects from the vulnerability
function getCvssList(vuln) {
  const versions = ["cvssv2", "cvssv3", "cvssv31", "cvssv4"];
  return versions
    .map(ver => ({
      version: ver,
      ...vuln[ver],
    }))
    .filter(cvss => cvss && (cvss.cvss_score > 0 || cvss.cvss_vector || cvss.cvss_severity || cvss.cvss_description));
}

export default function VulnerabilityDetail() {
  const { assessmentId, vulnerabilityId } = useParams();
  const navigate = useNavigate();

  const [vulnerability, setVulnerability] = useState(null);
  const [pocs, setPocs] = useState<PocDoc[]>([]);

  useEffect(() => {
    document.title = "Vulnerability detail";

    getData<Vulnerability>(`/api/vulnerabilities/${vulnerabilityId}`, setVulnerability);

    getData<PocDoc[]>(`/api/vulnerabilities/${vulnerabilityId}/pocs`, setPocs);
  }, [assessmentId, vulnerabilityId]);

  if (!vulnerability) {
    return null;
  }

  const cvssList = getCvssList(vulnerability);

  return (
    <div className="max-w-full">
      <SectionTitleLineWithButton
        icon={undefined}
        title={`${vulnerability.category.index} - ${vulnerability.category.name}${vulnerability.detailed_title ? ` (${vulnerability.detailed_title})` : ""}`}
        main
      >
        <Buttons noWrap>
          <Button icon={mdiFileEdit} text="Edit Vulnerability" small onClick={() => navigate(`edit`)} />
          <Button icon={mdiFileEdit} text="Edit PoC" small onClick={() => navigate(`pocs`)} />
        </Buttons>
      </SectionTitleLineWithButton>

      <Grid className="gap-4 overflow-x-auto">
        <Card className="flex overflow-hidden !p-0">
          {(() => {
            const labelColWidth = 15;
            const cvssColCount = cvssList.length;
            const cvssColWidth = 85 / cvssColCount;

            return (
              <table className="table" style={{ width: "100%" }}>
                <colgroup>
                  <col style={{ width: `${labelColWidth}%` }} />
                  {cvssList.map((_, idx) => (
                    <col key={idx} style={{ width: `${cvssColWidth}%` }} />
                  ))}
                </colgroup>
                <thead>
                  <tr>
                    <th></th>
                    {cvssList.map((cvss, idx) => (
                      <th className="text-center" key={idx}>
                        CVSSv{cvss.cvss_version}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className="border-none">
                  <tr>
                    <th>Severity</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.cvss_severity}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Score</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.cvss_score}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Vector</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="text-center" key={idx}>
                        {cvss.cvss_vector}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <th>Description</th>
                    {cvssList.map((cvss, idx) => (
                      <td className="content-start text-justify" key={idx}>
                        {cvss.cvss_description}
                      </td>
                    ))}
                  </tr>
                </tbody>
              </table>
            );
          })()}
        </Card>

        <Card className="flex overflow-hidden !p-0">
          <table className="table" style={{ width: "100%" }}>
            <colgroup>
              <col style={{ width: "10%" }} />
              <col style={{ width: "90%" }} />
            </colgroup>
            <tbody className="border-none">
              <tr>
                <th>Generic description</th>
                <td>{vulnerability.generic_description.text}</td>
              </tr>
              <tr>
                <th>Detailed description</th>
                <td>{vulnerability.description}</td>
              </tr>
              <tr>
                <th>Remediation</th>
                <td>{vulnerability.generic_remediation.text + vulnerability.remediation}</td>
              </tr>
              <tr>
                <th>References</th>
                <td>
                  <ul>
                    {(vulnerability.references || []).map((reference, index) => (
                      <li key={index}>{reference}</li>
                    ))}
                  </ul>
                </td>
              </tr>
              <tr>
                <th>Target</th>
                <td>
                  {(() => {
                    const ip = vulnerability.target.ipv4 || vulnerability.target.ipv6 || "";
                    const fqdn = vulnerability.target.fqdn || "";
                    const name = vulnerability.target.name ? ` (${vulnerability.target.name})` : "";

                    if (ip) {
                      return `${ip}${fqdn ? ` - ${fqdn}` : ""}${name}`;
                    }
                    return `${fqdn}${name}`;
                  })()}
                </td>
              </tr>
              <tr>
                <th>User</th>
                <td>{vulnerability.user.username}</td>
              </tr>
            </tbody>
          </table>
        </Card>

        <Card>
          <CardTitle title="Proofs of Concept" />
          {pocs.length === 0 ? (
            <div className="font-thin text-[color:--border-primary-highlight]">
              No PoCs available for this vulnerability.
            </div>
          ) : (
            pocs.sort((a, b) => a.index - b.index).map((poc, i) => <PocItem key={`poc-preview-${i}`} poc={poc} />)
          )}
        </Card>
      </Grid>
    </div>
  );
}
