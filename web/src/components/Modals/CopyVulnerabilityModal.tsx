import { useEffect, useMemo, useState } from "react";
import { toast } from "react-toastify";
import { getData, postData } from "../../api/api";
import { Assessment, Customer } from "../../types/common.types";
import { getTargetLabel } from "../../utils/targetLabel";
import Grid from "../Composition/Grid";
import Modal from "../Composition/Modal";
import Checkbox from "../Form/Checkbox";
import SelectWrapper from "../Form/SelectWrapper";
import { SelectOption } from "../Form/SelectWrapper.types";

export default function CopyVulnerabilityModal({ setShowModal, vulnerabilityId }) {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [selectedCustomer, setSelectedCustomer] = useState<SelectOption>();
  const [assessments, setAssessments] = useState<Assessment[]>([]);
  const [selectedAssessment, setSelectedAssessment] = useState<SelectOption>();
  const [selectedTargets, setSelectedTargets] = useState<SelectOption[]>([]);
  const [includePocs, setIncludePocs] = useState(false);

  useEffect(() => {
    getData("/api/customers", setCustomers);
  }, []);

  useEffect(() => {
    if (selectedCustomer == undefined) {
      return;
    }
    setSelectedAssessment(undefined);
    setSelectedTargets([]);
    setAssessments([]);

    getData<Assessment[]>(`/api/customers/${selectedCustomer.value}/assessments`, setAssessments);
  }, [selectedCustomer]);

  useEffect(() => {
    setSelectedTargets([]);
  }, [selectedAssessment]);

  const targetsOptions = useMemo(
    () =>
      assessments
        .find(assessment => assessment.id === selectedAssessment.value)
        ?.targets.map(target => ({ label: getTargetLabel(target), value: target.id })) ?? [],
    [selectedAssessment]
  );

  const handleCopyConfirm = () => {
    const payload = {
      assessment_id: selectedAssessment.value,
      target_ids: selectedTargets.map(target => target.value),
      include_pocs: includePocs,
    };

    postData(`/api/vulnerabilities/${vulnerabilityId}/copy`, payload, () => {
      setShowModal(false);
      toast.success("Vulnerability copied");
    });
  };

  return (
    <Modal
      title="Copy vulnerability"
      confirmButtonLabel="Copy"
      onConfirm={handleCopyConfirm}
      onCancel={() => setShowModal(false)}
    >
      <Grid className="grid-cols-1 gap-4">
        <p>Make a copy of this vulnerability in another assessment</p>
        <SelectWrapper
          label="Customer"
          id="customer"
          options={customers.map(customer => ({ label: customer.name, value: customer.id }))}
          value={selectedCustomer}
          onChange={setSelectedCustomer}
        />
        <SelectWrapper
          disabled={selectedCustomer == undefined}
          label="Assessment"
          id="assessment"
          options={assessments.map(assessment => ({ label: assessment.name, value: assessment.id }))}
          value={selectedAssessment}
          onChange={setSelectedAssessment}
        />
        <SelectWrapper
          disabled={selectedAssessment == undefined}
          isMulti
          label="Targets"
          id="targets"
          options={targetsOptions}
          value={selectedTargets}
          onChange={setSelectedTargets}
          closeMenuOnSelect={false}
        />
        <Checkbox
          id="include_pocs"
          label="Include PoCs"
          checked={includePocs}
          onChange={e => setIncludePocs(e.target.checked)}
        />
      </Grid>
    </Modal>
  );
}
