package mongo

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"time"

	"github.com/Alexius22/kryvea/internal/cvss"
	"github.com/Alexius22/kryvea/internal/util"
	"github.com/google/uuid"
	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"go.mongodb.org/mongo-driver/v2/mongo/options"
)

const (
	vulnerabilityCollection = "vulnerability"

	VulnearbilityStatusOpen             = "Open"
	VulnearbilityStatusRemediated       = "Remediated"
	VulnearbilityStatusPartlyRemediated = "Partially remediated"
)

type Vulnerability struct {
	Model              `bson:",inline"`
	Category           Category             `json:"category" bson:"category"`
	DetailedTitle      string               `json:"detailed_title,omitempty" bson:"detailed_title"`
	Status             string               `json:"status,omitempty" bson:"status"`
	CVSSv2             cvss.Vector          `json:"cvssv2,omitempty" bson:"cvssv2"`
	CVSSv3             cvss.Vector          `json:"cvssv3,omitempty" bson:"cvssv3"`
	CVSSv31            cvss.Vector          `json:"cvssv31,omitempty" bson:"cvssv31"`
	CVSSv4             cvss.Vector          `json:"cvssv4,omitempty" bson:"cvssv4"`
	References         []string             `json:"references,omitempty" bson:"references"`
	GenericDescription VulnerabilityGeneric `json:"generic_description" bson:"generic_description"`
	GenericRemediation VulnerabilityGeneric `json:"generic_remediation" bson:"generic_remediation"`
	Description        string               `json:"description,omitempty" bson:"description"`
	Remediation        string               `json:"remediation,omitempty" bson:"remediation"`
	Target             Target               `json:"target" bson:"target"`
	Customer           Customer             `json:"customer" bson:"customer"`
	Assessment         Assessment           `json:"assessment,omitempty" bson:"assessment"`
	User               User                 `json:"user,omitempty" bson:"user"`
	Poc                Poc                  `json:"poc,omitempty" bson:"poc"`
}

type VulnerabilityGeneric struct {
	Enabled bool   `json:"enabled" bson:"enabled"`
	Text    string `json:"text" bson:"text"`
}

type VulnerabilityIndex struct {
	driver     *Driver
	collection *mongo.Collection
}

func (d *Driver) Vulnerability() *VulnerabilityIndex {
	return &VulnerabilityIndex{
		driver:     d,
		collection: d.database.Collection(vulnerabilityCollection),
	}
}

func (vi VulnerabilityIndex) init() error {
	_, err := vi.collection.Indexes().CreateOne(
		context.Background(),
		mongo.IndexModel{
			Keys: bson.D{
				{Key: "detailed_title", Value: 1},
				{Key: "description", Value: 1},
			},
		},
	)
	return err
}

func (vi *VulnerabilityIndex) Insert(ctx context.Context, vulnerability *Vulnerability) (uuid.UUID, error) {
	err := vi.driver.Category().collection.FindOne(ctx, bson.M{"_id": vulnerability.Category.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	err = vi.driver.Target().collection.FindOne(ctx, bson.M{"_id": vulnerability.Target.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	err = vi.driver.Assessment().collection.FindOne(ctx, bson.M{"_id": vulnerability.Assessment.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	err = vi.driver.Customer().collection.FindOne(ctx, bson.M{"_id": vulnerability.Customer.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	id, err := uuid.NewRandom()
	if err != nil {
		return uuid.Nil, err
	}

	vulnerability.Model = Model{
		ID:        id,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if vulnerability.References == nil {
		vulnerability.References = []string{}
	}

	vulnerability.GenericDescription = VulnerabilityGeneric{
		Enabled: true,
	}

	_, err = vi.collection.InsertOne(ctx, vulnerability)
	if err != nil {
		return uuid.Nil, err
	}

	return vulnerability.ID, nil
}

func (vi *VulnerabilityIndex) Update(ctx context.Context, vulnerabilityID uuid.UUID, vulnerability *Vulnerability) error {
	filter := bson.M{"_id": vulnerabilityID}

	update := bson.M{
		"$set": bson.M{
			"updated_at":          time.Now(),
			"category._id":        vulnerability.Category.ID,
			"detailed_title":      vulnerability.DetailedTitle,
			"status":              vulnerability.Status,
			"cvssv2":              vulnerability.CVSSv2,
			"cvssv3":              vulnerability.CVSSv3,
			"cvssv31":             vulnerability.CVSSv31,
			"cvssv4":              vulnerability.CVSSv4,
			"references":          vulnerability.References,
			"generic_remediation": vulnerability.GenericRemediation,
			"description":         vulnerability.Description,
			"remediation":         vulnerability.Remediation,
			"target._id":          vulnerability.Target.ID,
		},
	}

	_, err := vi.collection.UpdateOne(ctx, filter, update)
	return err
}

// Delete removes a vulnerability and its associated PoCs
//
// Requires transactional context to ensure data integrity
func (vi *VulnerabilityIndex) Delete(ctx context.Context, vulnerabilityID uuid.UUID) error {
	// Remove all PoCs for the vulnerability
	err := vi.driver.Poc().DeleteByVulnerabilityID(ctx, vulnerabilityID)
	if err != nil {
		return fmt.Errorf("failed to delete Poc for Vulnerability %s: %w", vulnerabilityID.String(), err)
	}

	// Delete the vulnerability
	_, err = vi.collection.DeleteOne(ctx, bson.M{"_id": vulnerabilityID})
	return err
}

func (vi *VulnerabilityIndex) DeleteManyByAssessmentID(ctx context.Context, assessmentID uuid.UUID) error {
	vulnerabilities, err := vi.GetByAssessmentIDNoHydrate(ctx, assessmentID)
	if err != nil {
		return fmt.Errorf("failed to retrieve Vulnerabilities for Assessment %s: %w", assessmentID.String(), err)
	}

	vulnerabilityIDs := make([]uuid.UUID, len(vulnerabilities))
	for i, vulnerability := range vulnerabilities {
		vulnerabilityIDs[i] = vulnerability.ID
	}

	// Delete pocs
	err = vi.driver.Poc().DeleteManyByVulnerabilityID(ctx, vulnerabilityIDs)
	if err != nil {
		return fmt.Errorf("failed to delete Pocs: %w", err)
	}

	// Delete vulnerabilities
	filter := bson.M{"_id": bson.M{"$in": vulnerabilityIDs}}
	_, err = vi.collection.DeleteMany(ctx, filter)
	return err
}

func (vi *VulnerabilityIndex) GetByID(ctx context.Context, vulnerabilityID uuid.UUID) (*Vulnerability, error) {
	var vulnerability Vulnerability
	err := vi.collection.FindOne(ctx, bson.M{"_id": vulnerabilityID}).Decode(&vulnerability)
	if err != nil {
		return nil, err
	}

	return &vulnerability, nil
}

func (vi *VulnerabilityIndex) GetByIDPipeline(ctx context.Context, vulnerabilityID uuid.UUID) (*Vulnerability, error) {
	filter := bson.M{"_id": vulnerabilityID}

	vulnerability := &Vulnerability{}
	err := vi.collection.FindOne(ctx, filter).Decode(vulnerability)
	if err != nil {
		return nil, err
	}

	err = vi.hydrate(ctx, vulnerability)
	if err != nil {
		return nil, err
	}

	return vulnerability, nil
}

func (vi *VulnerabilityIndex) GetByTargetID(ctx context.Context, targetID uuid.UUID) ([]Vulnerability, error) {
	filter := bson.M{"target._id": targetID}

	cursor, err := vi.collection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	vulnerabilities := []Vulnerability{}
	err = cursor.All(ctx, &vulnerabilities)
	if err != nil {
		return nil, err
	}

	for i := range vulnerabilities {
		err = vi.hydrate(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}
	}

	return vulnerabilities, nil
}

func (vi *VulnerabilityIndex) GetByAssessmentID(ctx context.Context, assessmentID uuid.UUID) ([]Vulnerability, error) {
	filter := bson.M{"assessment._id": assessmentID}

	cursor, err := vi.collection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	vulnerabilities := []Vulnerability{}
	err = cursor.All(ctx, &vulnerabilities)
	if err != nil {
		return nil, err
	}

	for i := range vulnerabilities {
		err = vi.hydrate(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}
	}

	return vulnerabilities, nil
}

func (vi *VulnerabilityIndex) GetByAssessmentIDNoHydrate(ctx context.Context, assessmentID uuid.UUID) ([]Vulnerability, error) {
	filter := bson.M{"assessment._id": assessmentID}

	cursor, err := vi.collection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	vulnerabilities := []Vulnerability{}
	err = cursor.All(ctx, &vulnerabilities)
	if err != nil {
		return nil, err
	}

	return vulnerabilities, nil
}

func (vi *VulnerabilityIndex) SearchByAssessmentID(ctx context.Context, customerIDs []uuid.UUID, assessmentID uuid.UUID, query string, queries map[string]string, pagination *util.Pagination) (*VulnerabilityPaginationResult, error) {
	emptyPaginationResult := &VulnerabilityPaginationResult{
		TotalPages:     0,
		TotalDocuments: 0,
		Data:           []Vulnerability{},
	}

	categories, err := vi.driver.Category().Search(ctx, query)
	if err != nil {
		return nil, err
	}

	categoryIDs := make([]uuid.UUID, len(categories))
	for i, category := range categories {
		categoryIDs[i] = category.ID
	}

	targets, err := vi.driver.Target().SearchWithinCustomers(ctx, customerIDs, query)
	if err != nil {
		vi.driver.logger.Error().Err(err).Msg("Failed to search targets")
		return nil, err
	}

	targetIDs := make([]uuid.UUID, len(targets))
	for i, target := range targets {
		targetIDs[i] = target.ID
	}

	filter := bson.M{
		"$or": bson.A{
			// Category
			bson.M{"category._id": bson.M{"$in": categoryIDs}},

			bson.M{"detailed_title": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"status": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"references": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"description": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"remediation": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},

			// Target
			bson.M{"target._id": bson.M{"$in": targetIDs}},
		},
	}

	andFilters := bson.A{
		bson.D{{Key: "assessment._id", Value: assessmentID}},
	}

	if queries["user"] != "" {
		users, err := vi.driver.User().Search(ctx, queries["user"])
		if err != nil {
			return nil, err
		}
		if len(users) == 0 {
			return emptyPaginationResult, nil
		}

		userIDs := make([]uuid.UUID, len(users))
		for i, user := range users {
			userIDs[i] = user.ID
		}

		andFilters = append(andFilters, bson.D{{Key: "user._id", Value: bson.M{"$in": userIDs}}})
	} else {
		users, err := vi.driver.User().Search(ctx, query)
		if err != nil {
			return nil, err
		}

		userIDs := make([]uuid.UUID, len(users))
		for i, user := range users {
			userIDs[i] = user.ID
		}

		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"user._id": bson.M{"$in": userIDs}})
	}

	if queries["customer"] != "" {
		customers, err := vi.driver.Customer().Search(ctx, queries["customer"])
		if err != nil {
			return nil, err
		}
		if len(customers) == 0 {
			return emptyPaginationResult, nil
		}

		filteredCustomerIDs := make([]uuid.UUID, len(customers))
		for i, customer := range customers {
			filteredCustomerIDs[i] = customer.ID
		}
		allFilteredCustomerIDs := append(customerIDs, filteredCustomerIDs...)

		if len(allFilteredCustomerIDs) > 0 {
			andFilters = append(andFilters, bson.D{{Key: "customer._id", Value: bson.M{"$in": allFilteredCustomerIDs}}})
		}
	} else {
		customers, err := vi.driver.Customer().Search(ctx, query)
		if err != nil {
			return nil, err
		}

		filteredCustomerIDs := make([]uuid.UUID, len(customers))
		for i, customer := range customers {
			filteredCustomerIDs[i] = customer.ID
		}

		if len(filteredCustomerIDs) > 0 {
			filter["$or"] = append(filter["$or"].(bson.A), bson.M{"customer._id": bson.M{"$in": filteredCustomerIDs}})
		}

		if len(customerIDs) > 0 {
			andFilters = append(andFilters, bson.D{{Key: "customer._id", Value: bson.M{"$in": customerIDs}}})
		}
	}

	if queries["start_date_time"] != "" {
		startDate, err := time.Parse(time.RFC3339, queries["start_date_time"])
		if err == nil {
			andFilters = append(andFilters, bson.D{{Key: "created_at", Value: bson.D{{Key: "$gte", Value: startDate}}}})
		}
	}

	if queries["end_date_time"] != "" {
		endDate, err := time.Parse(time.RFC3339, queries["end_date_time"])
		if err == nil {
			andFilters = append(andFilters, bson.D{{Key: "created_at", Value: bson.D{{Key: "$lte", Value: endDate}}}})
		}
	}

	scoreConds := bson.A{}
	for _, field := range []string{
		"cvssv2.score",
		"cvssv3.score",
		"cvssv31.score",
		"cvssv4.score",
	} {
		cond := bson.M{}
		if v, err := strconv.ParseFloat(queries[field+".min"], 64); err == nil {
			cond["$gte"] = v
		}
		if v, err := strconv.ParseFloat(queries[field+".max"], 64); err == nil {
			cond["$lte"] = v
		}

		if len(cond) == 0 {
			continue
		}

		scoreConds = append(scoreConds, bson.D{{Key: field, Value: cond}})
	}
	if len(scoreConds) > 0 {
		andFilters = append(andFilters, bson.D{{Key: "$or", Value: scoreConds}})
	} else {
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv2.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv3.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv31.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv4.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
	}

	andFilters = append(andFilters, filter)

	finalFilter := bson.D{{Key: "$and", Value: andFilters}}

	opts := options.Find()
	if pagination != nil {
		if pagination.Page < 1 {
			pagination.Page = 1
		}
		if pagination.Limit < 1 {
			pagination.Limit = 5
		}

		opts.SetSort(bson.M{"updated_at": -1}).
			SetLimit(pagination.Limit).
			SetSkip(pagination.Skip)
	}

	totalDocuments, err := vi.collection.CountDocuments(ctx, finalFilter)
	if err != nil {
		return nil, err
	}

	vulnerabilities := []Vulnerability{}
	if totalDocuments > 0 {
		cursor, err := vi.collection.Find(ctx, finalFilter, opts)
		if err != nil {
			return nil, err
		}
		defer cursor.Close(ctx)

		err = cursor.All(ctx, &vulnerabilities)
		if err != nil {
			return nil, err
		}
	}

	for i := range vulnerabilities {
		err = vi.hydrate(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}
	}

	result := VulnerabilityPaginationResult{
		TotalPages:     0,
		TotalDocuments: int(totalDocuments),
		Data:           vulnerabilities,
	}

	if pagination != nil {
		result.TotalPages = (int(totalDocuments) + int(pagination.Limit) - 1) / int(pagination.Limit)
	} else if totalDocuments > 0 {
		result.TotalPages = 1
	}

	return &result, nil
}

func (vi *VulnerabilityIndex) GetByAssessmentIDPocPipeline(ctx context.Context, assessmentID uuid.UUID, includeInformationalVulnerabilities bool, maxVersion string) ([]Vulnerability, error) {
	filter := bson.M{
		"assessment._id": assessmentID,
	}

	if !includeInformationalVulnerabilities {
		switch maxVersion {
		case cvss.Cvss2:
			filter["cvssv2.severity"] = bson.M{
				"$ne": cvss.CvssSeverityNone,
			}
		case cvss.Cvss3:
			filter["cvssv3.severity"] = bson.M{
				"$ne": cvss.CvssSeverityNone,
			}
		case cvss.Cvss31:
			filter["cvssv31.severity"] = bson.M{
				"$ne": cvss.CvssSeverityNone,
			}
		case cvss.Cvss4:
			filter["cvssv4.severity"] = bson.M{
				"$ne": cvss.CvssSeverityNone,
			}
		}
	}

	cursor, err := vi.collection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	vulnerabilities := []Vulnerability{}
	err = cursor.All(ctx, &vulnerabilities)
	if err != nil {
		return nil, err
	}

	for i := range vulnerabilities {
		err = vi.hydrate(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}

		err = vi.hydratePoc(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}
	}

	return vulnerabilities, nil
}

func (vi *VulnerabilityIndex) GetByUserID(ctx context.Context, userID uuid.UUID) ([]Vulnerability, error) {
	filter := bson.M{"user._id": userID}

	cursor, err := vi.collection.Find(ctx, filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	vulnerabilities := []Vulnerability{}
	err = cursor.All(ctx, &vulnerabilities)
	if err != nil {
		return nil, err
	}

	for i := range vulnerabilities {
		err = vi.hydrate(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}
	}

	return vulnerabilities, nil
}

type VulnerabilityPaginationResult struct {
	TotalDocuments int             `json:"total_documents" bson:"total_documents"`
	TotalPages     int             `json:"total_pages" bson:"total_pages"`
	Data           []Vulnerability `json:"data" bson:"data"`
}

func (vi *VulnerabilityIndex) Search(ctx context.Context, customerIDs []uuid.UUID, query string, queries map[string]string, pagination *util.Pagination) (*VulnerabilityPaginationResult, error) {
	emptyPaginationResult := &VulnerabilityPaginationResult{
		TotalPages:     0,
		TotalDocuments: 0,
		Data:           []Vulnerability{},
	}

	categories, err := vi.driver.Category().Search(ctx, query)
	if err != nil {
		return nil, err
	}

	categoryIDs := make([]uuid.UUID, len(categories))
	for i, category := range categories {
		categoryIDs[i] = category.ID
	}

	targets, err := vi.driver.Target().SearchWithinCustomers(ctx, customerIDs, query)
	if err != nil {
		vi.driver.logger.Error().Err(err).Msg("Failed to search targets")
		return nil, err
	}

	targetIDs := make([]uuid.UUID, len(targets))
	for i, target := range targets {
		targetIDs[i] = target.ID
	}

	filter := bson.M{
		"$or": bson.A{
			// Category
			bson.M{"category._id": bson.M{"$in": categoryIDs}},

			bson.M{"detailed_title": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"status": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"references": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"description": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			bson.M{"remediation": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},

			// Target
			bson.M{"target._id": bson.M{"$in": targetIDs}},
		},
	}

	andFilters := bson.A{}

	if queries["assessment"] != "" {
		assessments, err := vi.driver.Assessment().Search(ctx, customerIDs, uuid.Nil, queries["assessment"])
		if err != nil {
			return nil, err
		}
		if len(assessments) == 0 {
			return emptyPaginationResult, nil
		}

		assessmentIDs := make([]uuid.UUID, len(assessments))
		for i, assessment := range assessments {
			assessmentIDs[i] = assessment.ID
		}

		andFilters = append(andFilters, bson.D{{Key: "assessment._id", Value: bson.M{"$in": assessmentIDs}}})
	} else {
		assessments, err := vi.driver.Assessment().Search(ctx, customerIDs, uuid.Nil, query)
		if err != nil {
			return nil, err
		}

		assessmentIDs := make([]uuid.UUID, len(assessments))
		for i, assessment := range assessments {
			assessmentIDs[i] = assessment.ID
		}

		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"assessment._id": bson.M{"$in": assessmentIDs}})
	}

	if queries["user"] != "" {
		users, err := vi.driver.User().Search(ctx, queries["user"])
		if err != nil {
			return nil, err
		}
		if len(users) == 0 {
			return emptyPaginationResult, nil
		}

		userIDs := make([]uuid.UUID, len(users))
		for i, user := range users {
			userIDs[i] = user.ID
		}

		andFilters = append(andFilters, bson.D{{Key: "user._id", Value: bson.M{"$in": userIDs}}})
	} else {
		users, err := vi.driver.User().Search(ctx, query)
		if err != nil {
			return nil, err
		}

		userIDs := make([]uuid.UUID, len(users))
		for i, user := range users {
			userIDs[i] = user.ID
		}

		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"user._id": bson.M{"$in": userIDs}})
	}

	if queries["customer"] != "" {
		customers, err := vi.driver.Customer().Search(ctx, queries["customer"])
		if err != nil {
			return nil, err
		}
		if len(customers) == 0 {
			return emptyPaginationResult, nil
		}

		filteredCustomerIDs := make([]uuid.UUID, len(customers))
		for i, customer := range customers {
			filteredCustomerIDs[i] = customer.ID
		}

		allFilteredCustomerIDs := []uuid.UUID{}
		if len(customerIDs) > 0 {
			customerSet := make(map[uuid.UUID]struct{}, len(customerIDs))
			for _, id := range customerIDs {
				customerSet[id] = struct{}{}
			}

			allFilteredCustomerIDs = make([]uuid.UUID, 0, len(filteredCustomerIDs))

			for _, id := range filteredCustomerIDs {
				if _, exists := customerSet[id]; exists {
					allFilteredCustomerIDs = append(allFilteredCustomerIDs, id)
				}
			}
		} else {
			allFilteredCustomerIDs = filteredCustomerIDs
		}

		if len(allFilteredCustomerIDs) > 0 {
			andFilters = append(andFilters, bson.D{{Key: "customer._id", Value: bson.M{"$in": allFilteredCustomerIDs}}})
		}
	} else {
		customers, err := vi.driver.Customer().Search(ctx, query)
		if err != nil {
			return nil, err
		}

		filteredCustomerIDs := make([]uuid.UUID, len(customers))
		for i, customer := range customers {
			filteredCustomerIDs[i] = customer.ID
		}

		if len(filteredCustomerIDs) > 0 {
			filter["$or"] = append(filter["$or"].(bson.A), bson.M{"customer._id": bson.M{"$in": filteredCustomerIDs}})
		}

		if len(customerIDs) > 0 {
			andFilters = append(andFilters, bson.D{{Key: "customer._id", Value: bson.M{"$in": customerIDs}}})
		}
	}

	if queries["start_date_time"] != "" {
		startDate, err := time.Parse(time.RFC3339, queries["start_date_time"])
		if err == nil {
			andFilters = append(andFilters, bson.D{{Key: "created_at", Value: bson.D{{Key: "$gte", Value: startDate}}}})
		}
	}

	if queries["end_date_time"] != "" {
		endDate, err := time.Parse(time.RFC3339, queries["end_date_time"])
		if err == nil {
			andFilters = append(andFilters, bson.D{{Key: "created_at", Value: bson.D{{Key: "$lte", Value: endDate}}}})
		}
	}

	scoreConds := bson.A{}
	for _, field := range []string{
		"cvssv2.score",
		"cvssv3.score",
		"cvssv31.score",
		"cvssv4.score",
	} {
		cond := bson.M{}
		if v, err := strconv.ParseFloat(queries[field+".min"], 64); err == nil {
			cond["$gte"] = v
		}
		if v, err := strconv.ParseFloat(queries[field+".max"], 64); err == nil {
			cond["$lte"] = v
		}

		if len(cond) == 0 {
			continue
		}

		scoreConds = append(scoreConds, bson.D{{Key: field, Value: cond}})
	}
	if len(scoreConds) > 0 {
		andFilters = append(andFilters, bson.D{{Key: "$or", Value: scoreConds}})
	} else {
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv2.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv3.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv31.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
		filter["$or"] = append(filter["$or"].(bson.A), bson.M{"cvssv4.vector": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}})
	}

	andFilters = append(andFilters, filter)

	finalFilter := bson.D{{Key: "$and", Value: andFilters}}

	opts := options.Find()
	if pagination != nil {
		if pagination.Page < 1 {
			pagination.Page = 1
		}
		if pagination.Limit < 1 {
			pagination.Limit = 5
		}

		opts.SetSort(bson.M{"updated_at": -1}).
			SetLimit(pagination.Limit).
			SetSkip(pagination.Skip)
	}

	totalDocuments, err := vi.collection.CountDocuments(ctx, finalFilter)
	if err != nil {
		return nil, err
	}

	vulnerabilities := []Vulnerability{}
	if totalDocuments > 0 {
		cursor, err := vi.collection.Find(ctx, finalFilter, opts)
		if err != nil {
			return nil, err
		}
		defer cursor.Close(ctx)

		err = cursor.All(ctx, &vulnerabilities)
		if err != nil {
			return nil, err
		}
	}

	for i := range vulnerabilities {
		err = vi.hydrate(ctx, &vulnerabilities[i])
		if err != nil {
			return nil, err
		}
	}

	result := VulnerabilityPaginationResult{
		TotalPages:     0,
		TotalDocuments: int(totalDocuments),
		Data:           vulnerabilities,
	}

	if pagination != nil {
		result.TotalPages = (int(totalDocuments) + int(pagination.Limit) - 1) / int(pagination.Limit)
	} else if totalDocuments > 0 {
		result.TotalPages = 1
	}

	return &result, nil
}

// Clone creates a copy of a vulnerability for the provided assessment
// and optionally its associated PoCs
//
// Requires transactional context to ensure data integrity
func (vi *VulnerabilityIndex) Clone(ctx context.Context, vulnerabilityID, assessmentID uuid.UUID, includePocs bool) (uuid.UUID, error) {
	vulnerability, err := vi.GetByID(ctx, vulnerabilityID)
	if err != nil {
		return uuid.Nil, err
	}

	id, err := uuid.NewRandom()
	if err != nil {
		return uuid.Nil, err
	}

	vulnerability.ID = id
	vulnerability.CreatedAt = time.Now()
	vulnerability.UpdatedAt = vulnerability.CreatedAt
	vulnerability.Assessment.ID = assessmentID

	_, err = vi.collection.InsertOne(ctx, vulnerability)
	if err != nil {
		return uuid.Nil, err
	}

	if includePocs {
		// Clone PoCs
		poc, err := vi.driver.Poc().GetByVulnerabilityID(ctx, vulnerabilityID)
		if err != nil {
			return uuid.Nil, err
		}

		_, err = vi.driver.Poc().Clone(ctx, poc.ID, vulnerability.ID)
		if err != nil {
			return uuid.Nil, err
		}
	}

	return vulnerability.ID, nil
}

// Copy creates a copy of a vulnerability and
// optionally its associated PoCs
//
// Requires transactional context to ensure data integrity
func (vi *VulnerabilityIndex) Copy(ctx context.Context, vulnerability *Vulnerability, includePocs bool) (uuid.UUID, error) {
	oldVulnerabilityID := vulnerability.ID

	id, err := uuid.NewRandom()
	if err != nil {
		return uuid.Nil, err
	}

	vulnerability.ID = id
	vulnerability.CreatedAt = time.Now()
	vulnerability.UpdatedAt = vulnerability.CreatedAt

	_, err = vi.collection.InsertOne(ctx, vulnerability)
	if err != nil {
		return uuid.Nil, err
	}

	if includePocs {
		// Clone PoCs
		poc, err := vi.driver.Poc().GetByVulnerabilityID(ctx, oldVulnerabilityID)
		if err != nil {
			return uuid.Nil, err
		}

		_, err = vi.driver.Poc().Clone(ctx, poc.ID, vulnerability.ID)
		if err != nil {
			return uuid.Nil, err
		}
	}

	return vulnerability.ID, nil
}

func (vi *VulnerabilityIndex) RemoveUserReference(ctx context.Context, userID uuid.UUID) error {
	update := bson.M{
		"$set": bson.M{
			"user": User{},
		},
	}

	_, err := vi.collection.UpdateMany(ctx, bson.M{"user.id": userID}, update)
	return err
}

// hydrate fills in the nested fields for an Assessment
func (vi *VulnerabilityIndex) hydrate(ctx context.Context, vulnerability *Vulnerability) error {
	customer, err := vi.driver.Customer().GetByIDForHydrate(ctx, vulnerability.Customer.ID)
	if err != nil {
		return err
	}

	vulnerability.Customer = *customer

	assessment, err := vi.driver.Assessment().GetByIDForHydrate(ctx, vulnerability.Assessment.ID)
	if err != nil {
		return err
	}

	vulnerability.Assessment = *assessment

	target, err := vi.driver.Target().GetByID(ctx, vulnerability.Target.ID)
	if err != nil {
		return err
	}

	vulnerability.Target = *target

	if vulnerability.User.ID != uuid.Nil {
		user, err := vi.driver.User().GetByIDForHydrate(ctx, vulnerability.User.ID)
		if err != nil {
			return err
		}

		vulnerability.User = *user
	}

	// retrieve category and populate vulnerability generics
	category, err := vi.driver.Category().GetByID(ctx, vulnerability.Category.ID)
	if err != nil {
		return err
	}

	if vulnerability.GenericDescription.Enabled {
		vulnerability.GenericDescription.Text = category.GenericDescription[assessment.Language]
	}

	if vulnerability.GenericRemediation.Enabled {
		vulnerability.GenericRemediation.Text = category.GenericRemediation[assessment.Language]
	}

	category.GenericDescription = map[string]string{}
	category.GenericRemediation = map[string]string{}

	vulnerability.Category = *category

	return nil
}

// hydratePoc fills in the Poc field for an Assessment
func (vi *VulnerabilityIndex) hydratePoc(ctx context.Context, vulnerability *Vulnerability) error {
	poc, err := vi.driver.Poc().GetByVulnerabilityID(ctx, vulnerability.ID)
	if err != nil {
		if err != mongo.ErrNoDocuments {
			vulnerability.Poc = Poc{}
			return nil
		}
		return err
	}

	vulnerability.Poc = *poc

	return nil
}
