package mongo

import (
	"context"
	"regexp"
	"time"

	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

const (
	vulnerabilityCollection = "vulnerability"
)

var VulnerabilityPipeline = mongo.Pipeline{
	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "category"},
			{Key: "localField", Value: "category._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "categoryData"},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "category.name", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$categoryData.name", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "categoryData"}},

	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "target"},
			{Key: "localField", Value: "target._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "targetData"},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "target.ip", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$targetData.ip", 0}},
			}},
			{Key: "target.hostname", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$targetData.hostname", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "targetData"}},

	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "assessment"},
			{Key: "localField", Value: "assessment._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "assessmentData"},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "assessment.name", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$assessmentData.name", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "assessmentData"}},

	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "user"},
			{Key: "localField", Value: "user._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "userData"},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "user.username", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$userData.username", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "userData"}},
}

type Vulnerability struct {
	Model         `bson:",inline"`
	Category      VulnerabilityCategory `json:"category" bson:"category"`
	DetailedTitle string                `json:"detailed_title" bson:"detailed_title"`
	CVSSv2        VulnerabilityCVSS     `json:"cvssv2" bson:"cvssv2"`
	CVSSv3        VulnerabilityCVSS     `json:"cvssv3" bson:"cvssv3"`
	CVSSv31       VulnerabilityCVSS     `json:"cvssv31" bson:"cvssv31"`
	CVSSv4        VulnerabilityCVSS     `json:"cvssv4" bson:"cvssv4"`
	CVSSReport    VulnerabilityCVSS     `json:"cvss_report" bson:"cvss_report"`
	// remove the following cvss
	// CVSSVector         string                  `json:"cvss_vector" bson:"cvss_vector"`
	// CVSSScore          float64                 `json:"cvss_score" bson:"cvss_score"`
	// CVSSSeverity       string                  `json:"cvss_severity" bson:"cvss_severity"`
	// CVSSDescription    string                  `json:"cvss_description" bson:"cvss_description"`
	References         []string                `json:"references" bson:"references"`
	GenericDescription VulnerabilityGeneric    `json:"generic_description" bson:"generic_description"`
	GenericRemediation VulnerabilityGeneric    `json:"generic_remediation" bson:"generic_remediation"`
	Description        string                  `json:"description" bson:"description"`
	Remediation        string                  `json:"remediation" bson:"remediation"`
	Target             VulnerabilityTarget     `json:"target" bson:"target"`
	Assessment         VulnerabilityAssessment `json:"assessment" bson:"assessment"`
	User               VulnerabilityUser       `json:"user" bson:"user"`
}

type VulnerabilityCategory struct {
	ID   bson.ObjectID `json:"id" bson:"_id"`
	Name string        `json:"name" bson:"name"`
}

type VulnerabilityCVSS struct {
	CVSSVector      string  `json:"cvss_vector" bson:"cvss_vector"`
	CVSSScore       float64 `json:"cvss_score" bson:"cvss_score"`
	CVSSSeverity    string  `json:"cvss_severity" bson:"cvss_severity"`
	CVSSDescription string  `json:"cvss_description" bson:"cvss_description"`
}

type VulnerabilityGeneric struct {
	Enabled bool   `json:"enabled" bson:"enabled"`
	Text    string `json:"text" bson:"text"`
}

type VulnerabilityTarget struct {
	ID       bson.ObjectID `json:"id" bson:"_id"`
	IP       string        `json:"ip" bson:"ip"`
	Hostname string        `json:"hostname" bson:"hostname"`
}

type VulnerabilityAssessment struct {
	ID   bson.ObjectID `json:"id" bson:"_id"`
	Name string        `json:"name" bson:"name"`
}

type VulnerabilityUser struct {
	ID       bson.ObjectID `json:"id" bson:"_id"`
	Username string        `json:"username" bson:"username"`
}

type VulnerabilityIndex struct {
	driver     *Driver
	collection *mongo.Collection
}

func (d *Driver) Vulnerability() *VulnerabilityIndex {
	return &VulnerabilityIndex{
		driver:     d,
		collection: d.database.Collection(vulnerabilityCollection),
	}
}

func (vi VulnerabilityIndex) init() error {
	_, err := vi.collection.Indexes().CreateOne(
		context.Background(),
		mongo.IndexModel{
			Keys: bson.D{
				{Key: "detailed_title", Value: 1},
				{Key: "description", Value: 1},
			},
		},
	)
	return err
}

func (vi *VulnerabilityIndex) Insert(vulnerability *Vulnerability) (bson.ObjectID, error) {
	err := vi.driver.Category().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.Category.ID}).Err()
	if err != nil {
		return bson.NilObjectID, err
	}

	err = vi.driver.Target().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.Target.ID}).Err()
	if err != nil {
		return bson.NilObjectID, err
	}

	err = vi.driver.Assessment().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.Assessment.ID}).Err()
	if err != nil {
		return bson.NilObjectID, err
	}

	vulnerability.Model = Model{
		ID:        bson.NewObjectID(),
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if vulnerability.References == nil {
		vulnerability.References = []string{}
	}

	_, err = vi.collection.InsertOne(context.Background(), vulnerability)
	return vulnerability.ID, err
}

func (vi *VulnerabilityIndex) Update(vulnerabilityID bson.ObjectID, vulnerability *Vulnerability) error {
	filter := bson.M{"_id": vulnerabilityID}

	update := bson.M{
		"$set": bson.M{
			"updated_at":          time.Now(),
			"category_id":         vulnerability.Category.ID,
			"detailed_title":      vulnerability.DetailedTitle,
			"cvssv2":              vulnerability.CVSSv2,
			"cvssv3":              vulnerability.CVSSv3,
			"cvssv31":             vulnerability.CVSSv31,
			"cvssv4":              vulnerability.CVSSv4,
			"references":          vulnerability.References,
			"generic_description": vulnerability.GenericDescription,
			"generic_remediation": vulnerability.GenericRemediation,
			"description":         vulnerability.Description,
			"remediation":         vulnerability.Remediation,
			"target_id":           vulnerability.Target.ID,
		},
	}

	_, err := vi.collection.UpdateOne(context.Background(), filter, update)
	return err
}

func (vi *VulnerabilityIndex) Delete(vulnerabilityID bson.ObjectID) error {
	_, err := vi.collection.DeleteOne(context.Background(), bson.M{"_id": vulnerabilityID})
	if err != nil {
		return err
	}

	// Remove all PoCs for the vulnerability
	pocs, err := vi.driver.Poc().GetByVulnerabilityID(vulnerabilityID)
	if err != nil {
		return err
	}

	for _, poc := range pocs {
		if err := vi.driver.Poc().Delete(poc.ID); err != nil {
			return err
		}
	}

	return nil
}

func (vi *VulnerabilityIndex) GetByID(vulnerabilityID bson.ObjectID) (*Vulnerability, error) {
	var vulnerability Vulnerability
	err := vi.collection.FindOne(context.Background(), bson.M{"_id": vulnerabilityID}).Decode(&vulnerability)
	if err != nil {
		return nil, err
	}

	return &vulnerability, nil
}

func (vi *VulnerabilityIndex) GetByTargetID(targetID bson.ObjectID) ([]Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline, bson.D{{Key: "$match", Value: bson.M{"target._id": targetID}}})
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerabilities []Vulnerability
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) GetByAssessmentID(assessmentID bson.ObjectID) ([]Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline, bson.D{{Key: "$match", Value: bson.M{"assessment._id": assessmentID}}})
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerabilities []Vulnerability
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) GetByAssessmentAndID(assessmentID, vulnerabilityID bson.ObjectID) (*Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline,
		bson.D{{Key: "$match", Value: bson.M{"assessment._id": assessmentID, "_id": vulnerabilityID}}},
		bson.D{{Key: "$limit", Value: 1}},
	)
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerability Vulnerability
	if cursor.Next(context.Background()) {
		if err := cursor.Decode(&vulnerability); err != nil {
			return nil, err
		}

		return &vulnerability, nil
	}

	return nil, mongo.ErrNoDocuments
}

func (vi *VulnerabilityIndex) Search(customerIDs []bson.ObjectID, query string) ([]Vulnerability, error) {
	filter := bson.M{"$and": []bson.M{
		{"$or": []bson.M{
			{"detailed_title": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			{"description": bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
		}},
	}}

	var assessmentIDs []bson.ObjectID
	for _, customerID := range customerIDs {
		assessments, err := vi.driver.Assessment().GetByCustomerID(customerID)
		if err != nil {
			return nil, err
		}

		for _, assessment := range assessments {
			assessmentIDs = append(assessmentIDs, assessment.ID)
		}
	}

	if len(assessmentIDs) > 0 {
		filter["$and"] = append(filter["$and"].([]bson.M), bson.M{"assessment._id": bson.M{"$in": assessmentIDs}})
	}

	cursor, err := vi.collection.Find(context.Background(), filter)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerabilities []Vulnerability
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) Clone(vulnerabilityID, assessmentID bson.ObjectID) (bson.ObjectID, error) {
	vulnerability, err := vi.GetByID(vulnerabilityID)
	if err != nil {
		return bson.NilObjectID, err
	}

	vulnerability.ID = bson.NewObjectID()
	vulnerability.CreatedAt = time.Now()
	vulnerability.UpdatedAt = time.Now()
	vulnerability.Assessment.ID = assessmentID

	_, err = vi.collection.InsertOne(context.Background(), vulnerability)
	if err != nil {
		return bson.NilObjectID, err
	}

	// Clone PoCs
	pocs, err := vi.driver.Poc().GetByVulnerabilityID(vulnerabilityID)
	if err != nil {
		return bson.NilObjectID, err
	}

	for _, poc := range pocs {
		_, err := vi.driver.Poc().Clone(poc.ID, vulnerability.ID)
		if err != nil {
			return bson.NilObjectID, err
		}
	}

	return vulnerability.ID, nil
}
