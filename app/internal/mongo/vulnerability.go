package mongo

import (
	"context"
	"regexp"
	"time"

	"github.com/Alexius22/kryvea/internal/cvss"
	"github.com/Alexius22/kryvea/internal/util"
	"github.com/google/uuid"
	"go.mongodb.org/mongo-driver/v2/bson"
	"go.mongodb.org/mongo-driver/v2/mongo"
)

const (
	vulnerabilityCollection = "vulnerability"
)

var VulnerabilityPipeline = mongo.Pipeline{
	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "category"},
			{Key: "localField", Value: "category._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "categoryData"},
			{Key: "pipeline", Value: mongo.Pipeline{
				bson.D{{Key: "$project", Value: bson.D{
					{Key: "generic_description", Value: 0},
					{Key: "generic_remediation", Value: 0},
				}}},
			}},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "category", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$categoryData", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "categoryData"}},

	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "target"},
			{Key: "localField", Value: "target._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "targetData"},
		}},
	},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "target", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$targetData", 0}},
			}},
		}},
	},
	bson.D{{Key: "$unset", Value: "targetData"}},

	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "assessment"},
			{Key: "localField", Value: "assessment._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "assessmentData"},
			{Key: "pipeline", Value: mongo.Pipeline{
				bson.D{{Key: "$project", Value: bson.D{
					{Key: "_id", Value: 1},
					{Key: "name", Value: 1},
				}}},
			}},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "assessment", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$assessmentData", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "assessmentData"}},

	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "user"},
			{Key: "localField", Value: "user._id"},
			{Key: "foreignField", Value: "_id"},
			{Key: "as", Value: "userData"},
			{Key: "pipeline", Value: mongo.Pipeline{
				bson.D{{Key: "$project", Value: bson.D{
					{Key: "_id", Value: 1},
					{Key: "username", Value: 1},
				}}},
			}},
		}}},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "user", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$userData", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "userData"}},
}

var VulnerabilityPocPipeline = mongo.Pipeline{
	bson.D{
		{Key: "$lookup", Value: bson.D{
			{Key: "from", Value: "poc"},
			{Key: "localField", Value: "_id"},
			{Key: "foreignField", Value: "vulnerability_id"},
			{Key: "as", Value: "pocData"},
		}},
	},
	bson.D{
		{Key: "$set", Value: bson.D{
			{Key: "poc", Value: bson.D{
				{Key: "$arrayElemAt", Value: bson.A{"$pocData", 0}},
			}},
		}}},
	bson.D{{Key: "$unset", Value: "pocData"}},
}

type Vulnerability struct {
	Model              `bson:",inline"`
	Category           Category             `json:"category" bson:"category"`
	DetailedTitle      string               `json:"detailed_title,omitempty" bson:"detailed_title"`
	Status             string               `json:"status,omitempty" bson:"status"`
	CVSSv2             cvss.Vector          `json:"cvssv2,omitempty" bson:"cvssv2"`
	CVSSv3             cvss.Vector          `json:"cvssv3,omitempty" bson:"cvssv3"`
	CVSSv31            cvss.Vector          `json:"cvssv31,omitempty" bson:"cvssv31"`
	CVSSv4             cvss.Vector          `json:"cvssv4,omitempty" bson:"cvssv4"`
	References         []string             `json:"references,omitempty" bson:"references"`
	GenericDescription VulnerabilityGeneric `json:"generic_description" bson:"generic_description"`
	GenericRemediation VulnerabilityGeneric `json:"generic_remediation" bson:"generic_remediation"`
	Description        string               `json:"description,omitempty" bson:"description"`
	Remediation        string               `json:"remediation,omitempty" bson:"remediation"`
	Target             Target               `json:"target" bson:"target"`
	Assessment         Assessment           `json:"assessment,omitempty" bson:"assessment"`
	User               User                 `json:"user,omitempty" bson:"user"`
	Poc                Poc                  `json:"poc,omitempty" bson:"poc"`
}

type VulnerabilityGeneric struct {
	Enabled bool   `json:"enabled" bson:"enabled"`
	Text    string `json:"text" bson:"text"`
}

type VulnerabilityIndex struct {
	driver     *Driver
	collection *mongo.Collection
}

func (d *Driver) Vulnerability() *VulnerabilityIndex {
	return &VulnerabilityIndex{
		driver:     d,
		collection: d.database.Collection(vulnerabilityCollection),
	}
}

func (vi VulnerabilityIndex) init() error {
	_, err := vi.collection.Indexes().CreateOne(
		context.Background(),
		mongo.IndexModel{
			Keys: bson.D{
				{Key: "detailed_title", Value: 1},
				{Key: "description", Value: 1},
			},
		},
	)
	return err
}

func (vi *VulnerabilityIndex) Insert(vulnerability *Vulnerability) (uuid.UUID, error) {
	err := vi.driver.Category().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.Category.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	err = vi.driver.Target().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.Target.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	err = vi.driver.Assessment().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.Assessment.ID}).Err()
	if err != nil {
		return uuid.Nil, err
	}

	id, err := uuid.NewRandom()
	if err != nil {
		return uuid.Nil, err
	}

	vulnerability.Model = Model{
		ID:        id,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if vulnerability.References == nil {
		vulnerability.References = []string{}
	}

	vulnerability.GenericDescription = VulnerabilityGeneric{
		Enabled: true,
	}

	_, err = vi.collection.InsertOne(context.Background(), vulnerability)
	if err != nil {
		return uuid.Nil, err
	}

	return vulnerability.ID, nil
}

func (vi *VulnerabilityIndex) Update(vulnerabilityID uuid.UUID, vulnerability *Vulnerability) error {
	filter := bson.M{"_id": vulnerabilityID}

	update := bson.M{
		"$set": bson.M{
			"updated_at":          time.Now(),
			"category._id":        vulnerability.Category.ID,
			"detailed_title":      vulnerability.DetailedTitle,
			"status":              vulnerability.Status,
			"cvssv2":              vulnerability.CVSSv2,
			"cvssv3":              vulnerability.CVSSv3,
			"cvssv31":             vulnerability.CVSSv31,
			"cvssv4":              vulnerability.CVSSv4,
			"references":          vulnerability.References,
			"generic_remediation": vulnerability.GenericRemediation,
			"description":         vulnerability.Description,
			"remediation":         vulnerability.Remediation,
			"target._id":          vulnerability.Target.ID,
		},
	}

	_, err := vi.collection.UpdateOne(context.Background(), filter, update)
	return err
}

func (vi *VulnerabilityIndex) Delete(vulnerabilityID uuid.UUID) error {
	// Remove all PoCs for the vulnerability
	err := vi.driver.Poc().DeleteByVulnerabilityID(vulnerabilityID)
	if err != nil {
		return err
	}

	// Delete the vulnerability
	_, err = vi.collection.DeleteOne(context.Background(), bson.M{"_id": vulnerabilityID})
	return err
}

func (vi *VulnerabilityIndex) GetByID(vulnerabilityID uuid.UUID) (*Vulnerability, error) {
	var vulnerability Vulnerability
	err := vi.collection.FindOne(context.Background(), bson.M{"_id": vulnerabilityID}).Decode(&vulnerability)
	if err != nil {
		return nil, err
	}

	return &vulnerability, nil
}

func (vi *VulnerabilityIndex) GetByIDPipeline(vulnerabilityID uuid.UUID) (*Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline,
		bson.D{{Key: "$match", Value: bson.M{"_id": vulnerabilityID}}},
		bson.D{{Key: "$limit", Value: 1}},
	)
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerability Vulnerability
	if cursor.Next(context.Background()) {
		if err := cursor.Decode(&vulnerability); err != nil {
			return nil, err
		}

		return &vulnerability, nil
	}

	return nil, mongo.ErrNoDocuments
}

func (vi *VulnerabilityIndex) GetByTargetID(targetID uuid.UUID) ([]Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline, bson.D{{Key: "$match", Value: bson.M{"target._id": targetID}}})
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	vulnerabilities := []Vulnerability{}
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) GetByAssessmentID(assessmentID uuid.UUID) ([]Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline, bson.D{{Key: "$match", Value: bson.M{"assessment._id": assessmentID}}})
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return []Vulnerability{}, err
	}
	defer cursor.Close(context.Background())

	vulnerabilities := []Vulnerability{}
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) GetByAssessmentIDPocPipeline(assessmentID uuid.UUID, includeInformationalVulnerabilities bool, maxVersion string) ([]Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline, VulnerabilityPocPipeline...)
	pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.M{"assessment._id": assessmentID}}})

	if !includeInformationalVulnerabilities {
		switch maxVersion {
		case cvss.Cvss2:
			pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.M{
				"cvssv2.severity.label": bson.D{
					{Key: "$ne", Value: cvss.CvssSeverityNone},
				},
			}}})
		case cvss.Cvss3:
			pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.M{
				"cvssv3.severity.label": bson.D{
					{Key: "$ne", Value: cvss.CvssSeverityNone},
				},
			}}})
		case cvss.Cvss31:
			pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.M{
				"cvssv31.severity.label": bson.D{
					{Key: "$ne", Value: cvss.CvssSeverityNone},
				},
			}}})
		case cvss.Cvss4:
			pipeline = append(pipeline, bson.D{{Key: "$match", Value: bson.M{
				"cvssv4.severity.label": bson.D{
					{Key: "$ne", Value: cvss.CvssSeverityNone},
				},
			}}})
		}
	}

	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return []Vulnerability{}, err
	}
	defer cursor.Close(context.Background())

	vulnerabilities := []Vulnerability{}
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) GetByAssessmentAndID(assessmentID, vulnerabilityID uuid.UUID) (*Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline,
		bson.D{{Key: "$match", Value: bson.M{"assessment._id": assessmentID, "_id": vulnerabilityID}}},
		bson.D{{Key: "$limit", Value: 1}},
	)
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerability Vulnerability
	if cursor.Next(context.Background()) {
		if err := cursor.Decode(&vulnerability); err != nil {
			return nil, err
		}

		return &vulnerability, nil
	}

	return nil, mongo.ErrNoDocuments
}

func (vi *VulnerabilityIndex) GetByUserID(userID uuid.UUID) ([]Vulnerability, error) {
	pipeline := append(VulnerabilityPipeline, bson.D{{Key: "$match", Value: bson.M{"user._id": userID}}})
	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	vulnerabilities := []Vulnerability{}
	err = cursor.All(context.Background(), &vulnerabilities)
	if err != nil {
		return nil, err
	}
	return vulnerabilities, nil
}

type VulnerabilityPaginationResult struct {
	TotalDocuments int             `json:"total_documents" bson:"total_documents"`
	TotalPages     int             `json:"total_pages" bson:"total_pages"`
	Data           []Vulnerability `json:"data" bson:"data"`
}

func (vi *VulnerabilityIndex) Search(customerIDs []uuid.UUID, query string, pagination *util.Pagination) (*VulnerabilityPaginationResult, error) {
	categories, err := vi.driver.Category().Search(query)
	if err != nil {
		return nil, err
	}

	categoryIDs := make([]uuid.UUID, len(categories))
	for i, category := range categories {
		categoryIDs[i] = category.ID
	}

	queryStage := bson.D{
		{Key: "$match", Value: bson.D{
			{Key: "$or", Value: bson.A{
				bson.D{{Key: "category._id", Value: bson.D{{Key: "$in", Value: categoryIDs}}}},
				bson.D{{Key: "detailed_title", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "status", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},

				// CVSS
				bson.D{{Key: "cvssv2.vector", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv2.score", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv3.vector", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv3.score", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv31.vector", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv31.score", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv4.vector", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "cvssv4.score", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},

				bson.D{{Key: "generic_description.text", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "generic_remediation.text", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "references", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "description", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "remediation", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},

				// Target
				bson.D{{Key: "target.ipv4", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "target.ipv6", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "target.port", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "target.protocol", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "target.fqdn", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
				bson.D{{Key: "target.tag", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},

				// Assessment
				bson.D{{Key: "assessment.name", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},

				// User
				bson.D{{Key: "user.username", Value: bson.M{"$regex": bson.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}}},
			}},
		}},
	}

	dataPipeline := append(VulnerabilityPipeline, queryStage)

	if pagination != nil {
		if pagination.Page < 1 {
			pagination.Page = 1
		}
		if pagination.Limit < 1 {
			pagination.Limit = 5
		}

		dataPipeline = append(dataPipeline,
			bson.D{{Key: "$sort", Value: bson.D{{Key: "updated_at", Value: -1}}}},
			bson.D{{Key: "$skip", Value: pagination.Skip}},
			bson.D{{Key: "$limit", Value: pagination.Limit}},
		)
	}

	metadataPipeline := mongo.Pipeline{
		queryStage,
		bson.D{{Key: "$count", Value: "total_documents"}},
	}

	pipeline := mongo.Pipeline{
		{{Key: "$facet", Value: bson.D{
			{Key: "metadata", Value: metadataPipeline},
			{Key: "data", Value: dataPipeline},
		}}},
		{{Key: "$project", Value: bson.D{
			{Key: "data", Value: 1},
			{Key: "total_documents", Value: bson.D{
				{Key: "$first", Value: "$metadata.total_documents"},
			}},
		}}},
	}

	cursor, err := vi.collection.Aggregate(context.Background(), pipeline)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	result := VulnerabilityPaginationResult{
		TotalPages: 0,
	}
	if cursor.Next(context.Background()) {
		if err := cursor.Decode(&result); err != nil {
			return nil, err
		}

		if pagination != nil {
			result.TotalPages = (result.TotalDocuments + int(pagination.Limit) - 1) / int(pagination.Limit)
		} else if result.TotalDocuments > 0 {
			result.TotalPages = 1
		}

		return &result, nil
	}

	return nil, mongo.ErrNoDocuments
}

func (vi *VulnerabilityIndex) Clone(vulnerabilityID, assessmentID uuid.UUID, includePocs bool) (uuid.UUID, error) {
	vulnerability, err := vi.GetByID(vulnerabilityID)
	if err != nil {
		return uuid.Nil, err
	}

	id, err := uuid.NewRandom()
	if err != nil {
		return uuid.Nil, err
	}

	vulnerability.ID = id
	vulnerability.CreatedAt = time.Now()
	vulnerability.UpdatedAt = vulnerability.CreatedAt
	vulnerability.Assessment.ID = assessmentID

	_, err = vi.collection.InsertOne(context.Background(), vulnerability)
	if err != nil {
		return uuid.Nil, err
	}

	if includePocs {
		// Clone PoCs
		poc, err := vi.driver.Poc().GetByVulnerabilityID(vulnerabilityID)
		if err != nil {
			return uuid.Nil, err
		}

		_, err = vi.driver.Poc().Clone(poc.ID, vulnerability.ID)
		if err != nil {
			return uuid.Nil, err
		}
	}

	return vulnerability.ID, nil
}

func (vi *VulnerabilityIndex) Copy(vulnerability *Vulnerability, includePocs bool) (uuid.UUID, error) {
	oldVulnerabilityID := vulnerability.ID

	id, err := uuid.NewRandom()
	if err != nil {
		return uuid.Nil, err
	}

	vulnerability.ID = id
	vulnerability.CreatedAt = time.Now()
	vulnerability.UpdatedAt = vulnerability.CreatedAt

	_, err = vi.collection.InsertOne(context.Background(), vulnerability)
	if err != nil {
		return uuid.Nil, err
	}

	if includePocs {
		// Clone PoCs
		poc, err := vi.driver.Poc().GetByVulnerabilityID(oldVulnerabilityID)
		if err != nil {
			return uuid.Nil, err
		}

		_, err = vi.driver.Poc().Clone(poc.ID, vulnerability.ID)
		if err != nil {
			return uuid.Nil, err
		}
	}

	return vulnerability.ID, nil
}
