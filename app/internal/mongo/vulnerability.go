package mongo

import (
	"context"
	"regexp"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

const (
	vulnerabilityCollection = "vulnerability"
)

type Vulnerability struct {
	Model              `bson:",inline"`
	CategoryID         primitive.ObjectID `json:"category_id" bson:"category_id"`
	DetailedTitle      string             `json:"detailed_title" bson:"detailed_title"`
	CVSSVector         string             `json:"cvss_vector" bson:"cvss_vector"`
	CVSSScore          float64            `json:"cvss_score" bson:"cvss_score"`
	CVSSSeverity       string             `json:"cvss_severity" bson:"cvss_severity"`
	References         []string           `json:"references" bson:"references"`
	GenericDescription bool               `json:"generic_description" bson:"generic_description"`
	GenericRemediation bool               `json:"generic_remediation" bson:"generic_remediation"`
	Description        string             `json:"description" bson:"description"`
	Remediation        string             `json:"remediation" bson:"remediation"`
	TargetID           primitive.ObjectID `json:"target_id" bson:"target_id"`
	AssessmentID       primitive.ObjectID `json:"assessment_id" bson:"assessment_id"`
}

type VulnerabilityIndex struct {
	driver     *Driver
	collection *mongo.Collection
}

func (d *Driver) Vulnerability() *VulnerabilityIndex {
	return &VulnerabilityIndex{
		driver:     d,
		collection: d.database.Collection(vulnerabilityCollection),
	}
}

func (vi VulnerabilityIndex) init() error {
	_, err := vi.collection.Indexes().CreateOne(
		context.Background(),
		mongo.IndexModel{
			Keys: bson.D{
				{Key: "detailed_title", Value: 1},
				{Key: "description", Value: 1},
			},
		},
	)
	return err
}

func (vi *VulnerabilityIndex) Insert(vulnerability *Vulnerability) (primitive.ObjectID, error) {
	err := vi.driver.Category().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.CategoryID}).Err()
	if err != nil {
		return primitive.NilObjectID, err
	}

	err = vi.driver.Target().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.TargetID}).Err()
	if err != nil {
		return primitive.NilObjectID, err
	}

	err = vi.driver.Assessment().collection.FindOne(context.Background(), bson.M{"_id": vulnerability.AssessmentID}).Err()
	if err != nil {
		return primitive.NilObjectID, err
	}

	vulnerability.Model = Model{
		ID:        primitive.NewObjectID(),
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}
	_, err = vi.collection.InsertOne(context.Background(), vulnerability)
	return vulnerability.ID, err
}

func (vi *VulnerabilityIndex) Update(vulnerabilityID primitive.ObjectID, vulnerability *Vulnerability) error {
	filter := bson.M{"_id": vulnerabilityID}

	update := bson.M{
		"$set": bson.M{
			"updated_at":          time.Now(),
			"category_id":         vulnerability.CategoryID,
			"detailed_title":      vulnerability.DetailedTitle,
			"cvss_vector":         vulnerability.CVSSVector,
			"cvss_score":          vulnerability.CVSSScore,
			"cvss_severity":       vulnerability.CVSSSeverity,
			"references":          vulnerability.References,
			"generic_description": vulnerability.GenericDescription,
			"generic_remediation": vulnerability.GenericRemediation,
			"description":         vulnerability.Description,
			"remediation":         vulnerability.Remediation,
			"target_id":           vulnerability.TargetID,
		},
	}

	_, err := vi.collection.UpdateOne(context.Background(), filter, update)
	return err
}

func (vi *VulnerabilityIndex) Delete(vulnerabilityID primitive.ObjectID) error {
	_, err := vi.collection.DeleteOne(context.Background(), bson.M{"_id": vulnerabilityID})
	if err != nil {
		return err
	}

	_, err = vi.driver.Poc().collection.DeleteMany(context.Background(), bson.M{"vulnerability_id": vulnerabilityID})
	return err
}

func (vi *VulnerabilityIndex) GetByID(vulnerabilityID primitive.ObjectID) (*Vulnerability, error) {
	var vulnerability Vulnerability
	err := vi.collection.FindOne(context.Background(), bson.M{"_id": vulnerabilityID}).Decode(&vulnerability)
	if err != nil {
		return nil, err
	}

	return &vulnerability, nil
}

func (vi *VulnerabilityIndex) GetByTargetID(targetID primitive.ObjectID) ([]Vulnerability, error) {
	cursor, err := vi.collection.Find(context.Background(), bson.M{"target_id": targetID})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerabilities []Vulnerability
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) GetByAssessmentID(assessmentID primitive.ObjectID) ([]Vulnerability, error) {
	cursor, err := vi.collection.Find(context.Background(), bson.M{"assessment_id": assessmentID})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerabilities []Vulnerability
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}

func (vi *VulnerabilityIndex) Search(assessmentID primitive.ObjectID, query string) ([]Vulnerability, error) {
	cursor, err := vi.collection.Find(context.Background(), bson.M{"$and": []bson.M{
		{"assessment_id": assessmentID},
		{"$or": []bson.M{
			{"detailed_title": bson.M{"$regex": primitive.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
			{"description": bson.M{"$regex": primitive.Regex{Pattern: regexp.QuoteMeta(query), Options: "i"}}},
		}},
	}})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(context.Background())

	var vulnerabilities []Vulnerability
	err = cursor.All(context.Background(), &vulnerabilities)
	return vulnerabilities, err
}
