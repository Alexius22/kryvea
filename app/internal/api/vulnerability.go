package api

import (
	"github.com/Alexius22/kryvea/internal/cvss"
	"github.com/Alexius22/kryvea/internal/mongo"
	"github.com/Alexius22/kryvea/internal/util"
	"github.com/gofiber/fiber/v2"
)

func (d *Driver) AddVulnerability(c *fiber.Ctx) error {
	type reqData struct {
		Category           string  `json:"category"`
		DetailedTitle      string  `json:"detailed_title"`
		CVSSVector         string  `json:"cvss_vector"`
		CVSSScore          float32 `json:"cvss_score"`
		References         string  `json:"references"`
		GenericDescription bool    `json:"generic_description"`
		GenericRemediation bool    `json:"generic_remediation"`
		Description        string  `json:"description"`
		Remediation        string  `json:"remediation"`
		TargetID           string  `json:"target_id"`
		AssessmentID       string  `json:"assessment_id"`
	}

	data := &reqData{}
	if err := c.BodyParser(data); err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot parse JSON",
		})
	}

	categoryID, err := util.ParseMongoID(data.Category)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid category",
		})
	}

	_, err = d.mongo.Category().GetByID(categoryID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid category",
		})
	}

	targetID, err := util.ParseMongoID(data.TargetID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	_, err = d.mongo.Target().GetByID(targetID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	assessmentID, err := util.ParseMongoID(data.AssessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	assessment, err := d.mongo.Assessment().GetByID(assessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	cvssScore, err := cvss.ParseVector(data.CVSSVector, assessment.CVSSVersion)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid CVSS vector",
		})
	}

	err = d.mongo.Vulnerability().Insert(&mongo.Vulnerability{
		CategoryID:         categoryID,
		DetailedTitle:      data.DetailedTitle,
		CVSSVector:         data.CVSSVector,
		CVSSScore:          cvssScore,
		References:         data.References,
		GenericDescription: data.GenericDescription,
		GenericRemediation: data.GenericRemediation,
		Description:        data.Description,
		Remediation:        data.Remediation,
		TargetID:           targetID,
		AssessmentID:       assessmentID,
	})
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Failed to add vulnerability",
		})
	}

	c.Status(fiber.StatusCreated)
	return c.JSON(fiber.Map{
		"message": "Vulnerability created",
	})
}

func (d *Driver) SearchVulnerabilities(c *fiber.Ctx) error {
	assessment := c.Params("assessment")
	if assessment == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Assessment ID is required",
		})
	}

	assessmentID, err := util.ParseMongoID(assessment)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	query := c.Query("query")
	if query == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Query is required",
		})
	}

	vulnerabilities, err := d.mongo.Vulnerability().Search(assessmentID, query)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot search vulnerabilities",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}

func (d *Driver) GetAllVulnerabilities(c *fiber.Ctx) error {
	assessment := c.Params("assessment")
	if assessment == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Assessment ID is required",
		})
	}

	assessmentID, err := util.ParseMongoID(assessment)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	vulnerabilities, err := d.mongo.Vulnerability().GetByAssessmentID(assessmentID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get vulnerabilities",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}
