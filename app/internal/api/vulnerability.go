package api

import (
	"github.com/Alexius22/kryvea/internal/cvss"
	"github.com/Alexius22/kryvea/internal/mongo"
	"github.com/Alexius22/kryvea/internal/util"
	"github.com/gofiber/fiber/v2"
)

func (d *Driver) AddVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	type reqData struct {
		Category           string   `json:"category"`
		DetailedTitle      string   `json:"detailed_title"`
		CVSSVector         string   `json:"cvss_vector"`
		CVSSScore          float32  `json:"cvss_score"`
		CVSSSeverity       string   `json:"cvss_severity"`
		References         []string `json:"references"`
		GenericDescription bool     `json:"generic_description"`
		GenericRemediation bool     `json:"generic_remediation"`
		Description        string   `json:"description"`
		Remediation        string   `json:"remediation"`
		TargetID           string   `json:"target_id"`
		AssessmentID       string   `json:"assessment_id"`
	}

	data := &reqData{}
	if err := c.BodyParser(data); err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot parse JSON",
		})
	}

	categoryID, err := util.ParseMongoID(data.Category)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid category",
		})
	}

	_, err = d.mongo.Category().GetByID(categoryID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid category",
		})
	}

	targetID, err := util.ParseMongoID(data.TargetID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	_, err = d.mongo.Target().GetByID(targetID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	assessmentID, err := util.ParseMongoID(data.AssessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	assessment, err := d.mongo.Assessment().GetByID(assessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	if !util.CanAccessCustomer(user, assessment.CustomerID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	cvssScore, cvssSeverity, err := cvss.ParseVector(data.CVSSVector, assessment.CVSSVersion)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid CVSS vector",
		})
	}

	err = d.mongo.Vulnerability().Insert(&mongo.Vulnerability{
		CategoryID:         categoryID,
		DetailedTitle:      data.DetailedTitle,
		CVSSVector:         data.CVSSVector,
		CVSSScore:          cvssScore,
		CVSSSeverity:       cvssSeverity,
		References:         data.References,
		GenericDescription: data.GenericDescription,
		GenericRemediation: data.GenericRemediation,
		Description:        data.Description,
		Remediation:        data.Remediation,
		TargetID:           targetID,
		AssessmentID:       assessmentID,
	})
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Failed to add vulnerability",
		})
	}

	c.Status(fiber.StatusCreated)
	return c.JSON(fiber.Map{
		"message": "Vulnerability created",
	})
}

func (d *Driver) UpdateVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	type reqData struct {
		Category           string   `json:"category"`
		DetailedTitle      string   `json:"detailed_title"`
		CVSSVector         string   `json:"cvss_vector"`
		CVSSScore          float32  `json:"cvss_score"`
		CVSSSeverity       string   `json:"cvss_severity"`
		References         []string `json:"references"`
		GenericDescription bool     `json:"generic_description"`
		GenericRemediation bool     `json:"generic_remediation"`
		Description        string   `json:"description"`
		Remediation        string   `json:"remediation"`
		TargetID           string   `json:"target_id"`
	}

	data := &reqData{}
	if err := c.BodyParser(data); err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot parse JSON",
		})
	}

	vulnerabilityParam := c.Params("vulnerability")

	if vulnerabilityParam == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Vulnerability ID is required",
		})
	}

	vulnerabilityID, err := util.ParseMongoID(vulnerabilityParam)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	vulnerability, err := d.mongo.Vulnerability().GetByID(vulnerabilityID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	assessment, err := d.mongo.Assessment().GetByID(vulnerability.AssessmentID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get assessment",
		})
	}

	if !util.CanAccessCustomer(user, assessment.CustomerID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	categoryID, err := util.ParseMongoID(data.Category)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid category",
		})
	}

	_, err = d.mongo.Category().GetByID(categoryID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid category",
		})
	}

	targetID, err := util.ParseMongoID(data.TargetID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	_, err = d.mongo.Target().GetByID(targetID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	cvssScore, cvssSeverity, err := cvss.ParseVector(data.CVSSVector, assessment.CVSSVersion)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid CVSS vector",
		})
	}

	err = d.mongo.Vulnerability().Update(vulnerabilityID, &mongo.Vulnerability{
		CategoryID:         categoryID,
		DetailedTitle:      data.DetailedTitle,
		CVSSVector:         data.CVSSVector,
		CVSSScore:          cvssScore,
		CVSSSeverity:       cvssSeverity,
		References:         data.References,
		GenericDescription: data.GenericDescription,
		GenericRemediation: data.GenericRemediation,
		Description:        data.Description,
		Remediation:        data.Remediation,
		TargetID:           targetID,
	})
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Failed to update vulnerability",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(fiber.Map{
		"message": "Vulnerability updated",
	})
}

func (d *Driver) DeleteVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	vulnerabilityParam := c.Params("vulnerability")
	if vulnerabilityParam == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Assessment ID is required",
		})
	}

	vulnerabilityID, err := util.ParseMongoID(vulnerabilityParam)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	vulnerability, err := d.mongo.Vulnerability().GetByID(vulnerabilityID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	assessment, err := d.mongo.Assessment().GetByID(vulnerability.AssessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability",
		})
	}

	if !util.CanAccessCustomer(user, assessment.CustomerID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	err = d.mongo.Vulnerability().Delete(vulnerabilityID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot delete vulnerability",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(fiber.Map{
		"message": "Vulnerability deleted",
	})
}

func (d *Driver) SearchVulnerabilities(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	assessmentParam := c.Params("assessment")
	if assessmentParam == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Assessment ID is required",
		})
	}

	assessmentID, err := util.ParseMongoID(assessmentParam)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	assessment, err := d.mongo.Assessment().GetByID(assessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	if !util.CanAccessCustomer(user, assessment.CustomerID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	query := c.Query("query")
	if query == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Query is required",
		})
	}

	vulnerabilities, err := d.mongo.Vulnerability().Search(assessmentID, query)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot search vulnerabilities",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}

func (d *Driver) GetAllVulnerabilities(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	assessmentParam := c.Params("assessment")
	if assessmentParam == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Assessment ID is required",
		})
	}

	assessmentID, err := util.ParseMongoID(assessmentParam)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	assessment, err := d.mongo.Assessment().GetByID(assessmentID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid assessment ID",
		})
	}

	if !util.CanAccessCustomer(user, assessment.CustomerID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	vulnerabilities, err := d.mongo.Vulnerability().GetByAssessmentID(assessmentID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get vulnerabilities",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}
