package api

import (
	"fmt"

	"github.com/Alexius22/kryvea/internal/cvss"
	"github.com/Alexius22/kryvea/internal/mongo"
	"github.com/Alexius22/kryvea/internal/util"
	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
)

type vulnerabilityRequestData struct {
	Category           string   `json:"category"`
	DetailedTitle      string   `json:"detailed_title"`
	CVSSv2             string   `json:"cvssv2_vector"`
	CVSSv3             string   `json:"cvssv3_vector"`
	CVSSv31            string   `json:"cvssv31_vector"`
	CVSSv4             string   `json:"cvssv4_vector"`
	References         []string `json:"references"`
	GenericDescription bool     `json:"generic_description"`
	GenericRemediation bool     `json:"generic_remediation"`
	Description        string   `json:"description"`
	Remediation        string   `json:"remediation"`
	TargetID           string   `json:"target_id"`
}

func (d *Driver) AddVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	// parse assessment param
	assessment, errStr := d.assessmentFromParam(c.Params("assessment"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get customer from database
	customer, err := d.mongo.Customer().GetByID(assessment.Customer.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get customer",
		})
	}

	// check if user has access to customer
	if !util.CanAccessCustomer(user, customer.ID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	data := &vulnerabilityRequestData{}
	if err := c.BodyParser(data); err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot parse JSON",
		})
	}

	// get category from database
	category, errStr := d.categoryFromParam(data.Category)
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get target from database
	target, errStr := d.targetFromParam(data.TargetID)
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// create vulnerability object
	vuln := &mongo.Vulnerability{
		Category: mongo.VulnerabilityCategory{
			ID: category.ID,
		},
		DetailedTitle: data.DetailedTitle,
		References:    data.References,
		GenericDescription: mongo.VulnerabilityGeneric{
			Enabled: data.GenericDescription,
		},
		GenericRemediation: mongo.VulnerabilityGeneric{
			Enabled: data.GenericRemediation,
		},
		Description: data.Description,
		Remediation: data.Remediation,
		Target: mongo.Target{
			Model: mongo.Model{ID: target.ID},
		},
		Assessment: mongo.VulnerabilityAssessment{
			ID: assessment.ID,
		},
		User: mongo.VulnerabilityUser{
			ID: user.ID,
		},
	}

	// parse CVSS vectors
	errStr = parseAndAssignVulnerabilityCVSS(vuln, data, customer.Language)
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// insert vulnerability into database
	vulnerabilityID, err := d.mongo.Vulnerability().Insert(vuln)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Failed to add vulnerability",
		})
	}

	c.Status(fiber.StatusCreated)
	return c.JSON(fiber.Map{
		"message":          "Vulnerability created",
		"vulnerability_id": vulnerabilityID,
	})
}

func (d *Driver) UpdateVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	// parse assessment param
	assessment, errStr := d.assessmentFromParam(c.Params("assessment"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get customer from database
	customer, err := d.mongo.Customer().GetByID(assessment.Customer.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get customer",
		})
	}

	// check if user has access to customer
	if !util.CanAccessCustomer(user, customer.ID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	// parse vulnerability param
	vulnerability, errStr := d.vulnerabilityFromParam(c.Params("vulnerability"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	if vulnerability.Assessment.ID != assessment.ID {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	// parse request body
	data := &vulnerabilityRequestData{}
	if err := c.BodyParser(data); err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot parse JSON",
		})
	}

	// get category from database
	category, errStr := d.categoryFromParam(data.Category)
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get target from database
	target, errStr := d.targetFromParam(data.TargetID)
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	if target.Customer.ID != customer.ID {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid target ID",
		})
	}

	// create vulnerability object
	vuln := &mongo.Vulnerability{
		Category: mongo.VulnerabilityCategory{
			ID: category.ID,
		},
		DetailedTitle: data.DetailedTitle,
		References:    data.References,
		GenericDescription: mongo.VulnerabilityGeneric{
			Enabled: data.GenericDescription,
		},
		GenericRemediation: mongo.VulnerabilityGeneric{
			Enabled: data.GenericRemediation,
		},
		Description: data.Description,
		Remediation: data.Remediation,
		Target: mongo.Target{
			Model: mongo.Model{ID: target.ID},
		},
	}

	// parse CVSS vectors
	errStr = parseAndAssignVulnerabilityCVSS(vuln, data, customer.Language)
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// update vulnerability in database
	err = d.mongo.Vulnerability().Update(vulnerability.ID, vuln)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Failed to update vulnerability",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(fiber.Map{
		"message": "Vulnerability updated",
	})
}

func (d *Driver) DeleteVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	// parse assessment param
	assessment, errStr := d.assessmentFromParam(c.Params("assessment"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get customer from database
	customer, err := d.mongo.Customer().GetByID(assessment.Customer.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get customer",
		})
	}

	// check if user has access to customer
	if !util.CanAccessCustomer(user, customer.ID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	// parse vulnerability param
	vulnerability, errStr := d.vulnerabilityFromParam(c.Params("vulnerability"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	if vulnerability.Assessment.ID != assessment.ID {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	// delete vulnerability from database
	err = d.mongo.Vulnerability().Delete(vulnerability.ID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Cannot delete vulnerability",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(fiber.Map{
		"message": "Vulnerability deleted",
	})
}

func (d *Driver) SearchVulnerabilities(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	// if user has not access to any customer, return empty array
	if len(user.Customers) == 0 && user.Role != mongo.ROLE_ADMIN {
		c.Status(fiber.StatusOK)
		return c.JSON([]mongo.Vulnerability{})
	}

	// map user customers ID
	userCustomers := make([]uuid.UUID, len(user.Customers))
	for i, customer := range user.Customers {
		userCustomers[i] = customer.ID
	}

	// get vulnerabilities from database
	vulnerabilities, err := d.mongo.Vulnerability().Search(userCustomers, c.Query("query"))
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot search vulnerabilities",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}

func (d *Driver) GetVulnerabilitiesByAssessment(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	// parse assessment param
	assessment, errStr := d.assessmentFromParam(c.Params("assessment"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get customer from database
	customer, err := d.mongo.Customer().GetByID(assessment.Customer.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get customer",
		})
	}

	// check if user has access to customer
	if !util.CanAccessCustomer(user, customer.ID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	// get vulnerabilities from database
	vulnerabilities, err := d.mongo.Vulnerability().GetByAssessmentID(assessment.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get vulnerabilities",
		})
	}

	// set generic description and remediation
	for i := range vulnerabilities {
		category, err := d.mongo.Category().GetByID(vulnerabilities[i].Category.ID)
		if err != nil {
			c.Status(fiber.StatusInternalServerError)
			return c.JSON(fiber.Map{
				"error": "Cannot get category",
			})
		}

		if vulnerabilities[i].GenericDescription.Enabled {
			vulnerabilities[i].GenericDescription.Text = category.GenericDescription[customer.Language]
		}

		if vulnerabilities[i].GenericRemediation.Enabled {
			vulnerabilities[i].GenericRemediation.Text = category.GenericRemediation[customer.Language]
		}
	}

	if vulnerabilities == nil {
		vulnerabilities = []mongo.Vulnerability{}
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}

func (d *Driver) GetVulnerability(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	// parse assessment param
	assessment, errStr := d.assessmentFromParam(c.Params("assessment"))
	if errStr != "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": errStr,
		})
	}

	// get customer from database
	customer, err := d.mongo.Customer().GetByID(assessment.Customer.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get customer",
		})
	}

	// check if user has access to customer
	if !util.CanAccessCustomer(user, customer.ID) {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"error": "Unauthorized",
		})
	}

	// parse vulnerability param
	vulnerabilityParam := c.Params("vulnerability")
	if vulnerabilityParam == "" {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Vulnerability ID is required",
		})
	}

	vulnerabilityID, err := util.ParseUUID(vulnerabilityParam)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	vulnerability, err := d.mongo.Vulnerability().GetByIDPipeline(vulnerabilityID)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	if vulnerability.Assessment.ID != assessment.ID {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"error": "Invalid vulnerability ID",
		})
	}

	category, err := d.mongo.Category().GetByID(vulnerability.Category.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get category",
		})
	}

	if vulnerability.GenericDescription.Enabled {
		vulnerability.GenericDescription.Text = category.GenericDescription[customer.Language]
	}

	if vulnerability.GenericRemediation.Enabled {
		vulnerability.GenericRemediation.Text = category.GenericRemediation[customer.Language]
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerability)
}

func (d *Driver) GetUserVulnerabilities(c *fiber.Ctx) error {
	user := c.Locals("user").(*mongo.User)

	vulnerabilities, err := d.mongo.Vulnerability().GetByUserID(user.ID)
	if err != nil {
		c.Status(fiber.StatusInternalServerError)
		return c.JSON(fiber.Map{
			"error": "Cannot get vulnerabilities",
		})
	}

	c.Status(fiber.StatusOK)
	return c.JSON(vulnerabilities)
}

func parseVulnerabilityCVSS(vector string, version string, lang string) (mongo.VulnerabilityCVSS, error) {
	if vector == "" {
		return mongo.VulnerabilityCVSS{}, nil
	}

	score, severity, err := cvss.ParseVector(vector, version)
	if err != nil {
		return mongo.VulnerabilityCVSS{}, fmt.Errorf("invalid CVSS vector")
	}

	return mongo.VulnerabilityCVSS{
		CVSSVersion:     version,
		CVSSVector:      vector,
		CVSSScore:       score,
		CVSSSeverity:    severity,
		CVSSDescription: cvss.GenerateDescription(vector, version, lang),
	}, nil
}

func parseAndAssignVulnerabilityCVSS(vulnerability *mongo.Vulnerability, data *vulnerabilityRequestData, lang string) string {
	vulnerabilityCvss, err := parseVulnerabilityCVSS(data.CVSSv2, cvss.CVSS2, lang)
	if err != nil {
		return "invalid CVSSv2 vector"
	}
	vulnerability.CVSSv2 = vulnerabilityCvss

	vulnerabilityCvss, err = parseVulnerabilityCVSS(data.CVSSv3, cvss.CVSS3, lang)
	if err != nil {
		return "invalid CVSSv3 vector"
	}
	vulnerability.CVSSv3 = vulnerabilityCvss

	vulnerabilityCvss, err = parseVulnerabilityCVSS(data.CVSSv31, cvss.CVSS31, lang)
	if err != nil {
		return "invalid CVSSv31 vector"
	}
	vulnerability.CVSSv31 = vulnerabilityCvss

	vulnerabilityCvss, err = parseVulnerabilityCVSS(data.CVSSv4, cvss.CVSS4, lang)
	if err != nil {
		return "invalid CVSSv4 vector"
	}
	vulnerability.CVSSv4 = vulnerabilityCvss

	return ""
}

func (d *Driver) vulnerabilityFromParam(vulnerabilityParam string) (*mongo.Vulnerability, string) {
	if vulnerabilityParam == "" {
		return nil, "Vulnerability ID is required"
	}

	vulnerabilityID, err := util.ParseUUID(vulnerabilityParam)
	if err != nil {
		return nil, "Invalid vulnerability ID"
	}

	vulnerability, err := d.mongo.Vulnerability().GetByID(vulnerabilityID)
	if err != nil {
		return nil, "Invalid vulnerability ID"
	}

	return vulnerability, ""
}
